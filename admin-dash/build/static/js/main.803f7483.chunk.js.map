{"version":3,"sources":["components/TextEditor2/constants.js","components/TextEditor2/action.js","components/TextEditor2/index.js","config.js","components/TextEditor2/LivePreview/index.js","components/BuildCircuitBuilder/constants.js","components/FormBuilder/index.js","components/BuildCircuitBuilder/action.js","components/BuildCircuitBuilder/index.js","components/Modules/constants.js","components/Modules/action.js","components/TextEditor/text.js","components/Modules/index.js","components/TextEditor/index.js","components/Modules/AddModule/constants.js","components/Modules/AddModule/action.js","components/Modules/AddModule/index.js","components/Starter/AddModule/constants.js","components/Starter/AddModule/action.js","components/Starter/AddModule/index.js","components/Modules/Module/index.js","components/Course/AddCourse/constants.js","components/Course/AddCourse/action.js","components/Course/AddCourse/index.js","components/Course/action.js","components/Course/index.js","components/Course/AddIntroduction/index.js","components/Course/AddExperiment/index.js","components/Course/AddTroubleshoot/index.js","components/Course/AddBuildCircuit/index.js","components/Course/AddExperimentForm/index.js","components/Course/AddExcercise/index.js","components/CreatorHome/index.js","components/Course/AddResults/index.js","utils/setAuthToken.js","components/Auth/constants.js","components/Auth/action.js","components/Auth/Login.js","components/Auth/PrivateRoute.js","components/TextEditor2/reducer.js","components/Modules/reducer.js","components/Modules/AddModule/reducer.js","components/Course/AddCourse/reducer.js","components/Course/reducer.js","components/Auth/reducer.js","store.js","App.js","serviceWorker.js","index.js","components/Course/constants.js"],"names":["ACTION","SET_CONTENT","setTextEditor2Content","content","dispatch","type","payload","TextEditor2","props","handleEditorChange","className","apiKey","value","this","init","height","skin","content_style","menubar","image_dimensions","image_class_list","title","formats","nomargin","selector","classes","plugins","automatic_uploads","image_title","image_caption","file_picker_types","toolbar","file_picker_callback","callback","meta","console","log","input","document","createElement","setAttribute","onchange","a","file","files","Blob","size","options","maxSizeMB","maxWidthOrHeight","useWebWorker","imageCompression","compressedFile","formData","FormData","set","append","axios","post","then","res","data","process","location","alt","originalName","catch","err","click","paste_data_images","onEditorChange","React","Component","connect","state","textEditor2Reducer","bindActionCreators","style","color","textAlign","margin","dangerouslySetInnerHTML","__html","SET_FORM_DATA","setFormData","BuildCircuitBuilder","Upload","Dragger","openNotificationWithIcon","message","notification","ans","formItemLayoutWithOutLabel","wrapperCol","xs","span","offset","sm","normFile","e","Array","isArray","fileList","length","shift","width","padding","onFinish","val","steps","success","newSteps","map","step","upload_image","upload_side","description","response","name","status","thumbUrl","uid","imagePath","sideImagePath","setState","course_id","List","label","rules","required","fields","add","remove","field","index","key","display","alignItems","flexDirection","Item","fieldKey","TextArea","autoSize","minRows","valuePropName","getValueFromEvent","multiple","accept","customRequest","onSuccess","onError","listType","UploadOutlined","MinusCircleOutlined","fontSize","onClick","alignSelf","PlusOutlined","htmlType","initialValues","action","GET_MODULES","GET_CURRENT_MODULE","GET_COURSE_TROUBLESHOOT","UPDATE_COURSE","UPDATE_SUBMOD","getModules","get","modules","getCurrentModule","id","module","getCourseTroubleshoot","troubleshoot","addCourseTroubleshoot","faqs","updateModule","introduction","updateSubModule","TextEditor","onChange","useState","setAnswer","newAnswer","TabPane","Tabs","Modules","componentDidMount","match","params","changeCurrentWindow","selectedOptionWord","selectedWindow","loading","centered","tab","justify","align","GETTINGSTARTED","to","_id","some","el","find","modulesReducer","courseTroubleshoot","ADD_MODULE_SUCCESS","SET_MODULE_NAME","SET_MODULE_INTRODUCTION","CLEAR_ADD_MODULE","addModule","setModuleName","setModuleIntroduction","clearAddModule","AddModule","handleSubmit","history","goBack","target","addModuleReducer","AddModuleConf","justifyContent","readOnly","Module","event","onSubFinish","values","bind","getContent","toUpperCase","labelCol","noStyle","placeholder","textareaName","initialValue","marginLeft","paddingBottom","courses","course","layout","Math","random","currentModule","addCourse","setCourseName","setCourseThumbnail","thumbnailPath","clearAddCourse","AddCourse","module_id","thumbnail","thumbnailArray","thumbnailImage","addCourseReducer","getCurrentCourse","GET_CURRENT_COURSE","getParentModule","GET_CURRENT_PARENT","setIntroductionHtml","html","SET_INTRODUCTION_HTML","getIntroduction","GET_INTRODCUTION_HTML","addIntroduction","intro_id","introduction_id","ADD_INTRODUCTION_SUCCESS","clearIntroduction","CLEAR_INTRODUCTION","getBuildCircuit","GET_BUILD_CIRCUIT","buildCircuit","addBuildCircuit","code","codeStepStart","build_id","ADD_BUILD_CIRCUIT_SUCCESS","clearBuildCircuit","CLEAR_BUILD_CIRCUIT","getExperiment","GET_EXPERIMENT","experiment","addExperiment","simulationLink","finalMessage","exp_id","ADD_EXPERIMENT_SUCCESS","clearExperiment","CLEAR_EXPERIMENT","addExperimentForm","formContent","ADD_EXPERIMENT_FORM_SUCCESS","addResults","results_id","ADD_RESULTS_SUCCESS","getTroubleshoot","GET_TROUBLESHOOT","addTroubleshoot","troubleshoot_id","ADD_TROUBLESHOOT_SUCCESS","clearTroubleshoot","CLEAR_TROUBLESHOOT","getExcercise","GET_EXCERCISE","excercise","addExcercise","excercise_list","excerciseFiles","excerciseFilePaths","excercise_id","ADD_EXCERCISE_SUCCESS","clearExcercise","CLEAR_EXCERCISE","Course","parent","pathname","gettingStarted","courseReducer","currentCourse","currentParent","AddIntroduction","introductionHtml","border","classname","AddExperiment","autosize","AddTroubleshoot","AddBuildCircuit","pres","next","AddExperimentForm","handleAddInput","prevState","questions","inputModal","handleAddTextarea","textareaModal","handleAddNumber","numberModal","handleAddCheckbox","checkboxModal","handleAddText","textModal","handleAddHeading","headingModal","handleAddSwitch","switchModal","handleAddCheckboxgroup","checkboxgroupModal","handleAddRadio","radioModal","handelAddTruthTable","tempTable","tableModal","handleAddUpload","uploadModal","submitForm","expId","tempValue","expForm","form","formItemLayout","maxRows","Group","rad","checkedChildren","unCheckedChildren","whiteSpace","check","startsWith","defaultValue","disabled","icon","danger","visible","onCancel","footer","destroyOnClose","validateTrigger","whitespace","push","uuid","row","AddExcercise","newExcerciseFiles","CreatorHome","backgroundColor","minHeight","fontWeight","borderRadius","bordered","hoverable","cover","src","AddResults","results","setAuthToken","token","defaults","headers","common","loginAdmin","userData","localStorage","setItem","decoded","jwt_decode","setCurrentUser","logoutUser","removeItem","auth","authReducer","useEffect","isAuthenticated","setloading","remember","Password","component","rest","my","render","initialState","addModuleSuccess","addCourseSuccess","require","addIntroductionSuccess","addBuildCircuitSuccess","addExperimentSuccess","addTroubleshootSuccess","addExcerciseSuccess","JSON","parse","stringify","isEmpty","user","errors","rootReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","compose","applyMiddleware","thunk","persistor","persistStore","jwtToken","currentTime","Date","now","exp","window","href","App","editor","theme","background","mode","defaultSelectedKeys","selectedKeys","HomeFilled","path","Login","exact","withRouter","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.803f7483.chunk.js","sourcesContent":["export const ACTION = {\r\n    SET_CONTENT: 'SET_CONTENT',\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const setTextEditor2Content = (content) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_CONTENT,\r\n        payload: content\r\n    })\r\n}","import React from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport axios from \"axios\"\r\nimport \"./styles.scss\"\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { setTextEditor2Content } from './action';\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\n//JUST UTILITY CODE ONLY!!! NOT PART OF PROJECT\r\n\r\n\r\n\r\nclass TextEditor2 extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    handleEditorChange = (content) => {\r\n        this.props.setTextEditor2Content(content)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-editor\">\r\n                <Editor\r\n                    apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                    value={this.props.content}\r\n                    init={{\r\n                        // content_css: \"dark\",\r\n                        height: \"90vh\",\r\n                        skin: \"oxide-dark\",\r\n                        content_style: '.mce-content-body{background-color:#041D32; color:white}',\r\n                        menubar: false,\r\n                        image_dimensions: false,\r\n                        image_class_list: [\r\n                            { title: 'Responsive', value: 'img-responsive' }\r\n                        ],\r\n                        formats: {\r\n                            nomargin: { selector: 'figure', classes: 'no-margin' }\r\n                        },\r\n                        plugins: [\r\n                            'advlist autolink lists link image',\r\n                            'charmap print preview anchor help',\r\n                            'searchreplace visualblocks code',\r\n                            'insertdatetime media table paste wordcount emoticons',\r\n\r\n                        ],\r\n                        automatic_uploads: true,\r\n                        image_title: true,\r\n                        image_caption: true,\r\n                        file_picker_types: 'image',\r\n                        toolbar:\r\n                            'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n\r\n                        file_picker_callback: (callback, value, meta) => {\r\n                            console.log(\"called\")\r\n                            var input = document.createElement('input');\r\n                            input.setAttribute('type', 'file');\r\n                            input.setAttribute('accept', 'image/*');\r\n                            console.log(\"this\", this)\r\n                            input.onchange = async function () {\r\n                                var file = this.files[0];\r\n                                console.log(\"before compeee\")\r\n                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                const options = {\r\n                                    maxSizeMB: 1,\r\n                                    maxWidthOrHeight: 920,\r\n                                    useWebWorker: true\r\n                                }\r\n                                try {\r\n                                    const compressedFile = await imageCompression(file, options);\r\n\r\n                                    console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                    console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                    let formData = new FormData();\r\n                                    formData.set('expId', '12345')\r\n                                    formData.append('file', compressedFile)\r\n\r\n                                    await axios.post(`${baseUrl}/api/upload/introduction`, formData).then(\r\n                                        res => {\r\n                                            console.log(\"res.data\", res.data)\r\n                                            console.log(\"path\", process.env.PUBLIC_URL)\r\n                                            callback(res.data.location, {\r\n                                                alt: res.data.originalName\r\n                                            })\r\n                                        }\r\n                                    ).catch(err => console.log(\"error in uploading image\"))\r\n                                }\r\n                                catch (err) {\r\n                                    console.log(\"an erron man , probly while compressing\")\r\n                                }\r\n\r\n                                // console.log('images', file)\r\n                                // var reader = new FileReader();\r\n                                // reader.onload = function (e) {\r\n                                //   var id = 'blobid' + (new Date()).getTime();\r\n                                //   console.log('name', e.target.result)\r\n                                //   callback('logo192.png', {\r\n                                //     alt: file.name\r\n                                //   })\r\n                                // }\r\n                                // reader.readAsDataURL(file)\r\n                            };\r\n                            input.click()\r\n                        },\r\n                        paste_data_images: true,\r\n                    }}\r\n                    onEditorChange={this.handleEditorChange}\r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    content: state.textEditor2Reducer.content\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setTextEditor2Content: bindActionCreators(setTextEditor2Content, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TextEditor2);","export const baseUrl = ''\r\nexport const COURSE = \"Course\"\r\nexport const MODULE = \"Module\"\r\nexport const SUBMODULE = \"SubModule\"\r\nexport const GETTINGSTARTED = \"Getting Started\"","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport \"./styles.scss\"\r\n\r\nconst LivePreview = ({ content }) => {\r\n    return (\r\n        <div className=\"live-preview\">\r\n            <h2 style={{ color: \"white\", textAlign: \"center\", margin: \"20px 0\" }}>Live Preview</h2>\r\n            <div className=\"live-preview-frame\" dangerouslySetInnerHTML={{ __html: content }}></div>\r\n            {/* <div>{content}</div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    content: state.textEditor2Reducer.content\r\n})\r\n\r\nexport default connect(mapStateToProps)(LivePreview);\r\n","export const ACTION = {\r\n    SET_FORM_DATA: 'SET_FORM_DATA',\r\n};","import React from 'react'\r\n// import 'react-form-builder2/dist/app.css';\r\n// import { ReactFormBuilder, ReactFormGenerator } from 'react-form-builder2'\r\nimport \"./styles.scss\"\r\nimport { uuid } from 'uuidv4'\r\n\r\n\r\n//JUST UTILITY CODE ONLY!!! NOT PART OF PROJECT\r\n\r\n\r\n\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    notification,\r\n    Switch, Upload\r\n} from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\n\r\n\r\nclass FormBuilder extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            inputModal: false,\r\n            textareaModal: false,\r\n            numberModal: false,\r\n            checkboxModal: false,\r\n            radioModal: false,\r\n            switchModal: false,\r\n            checkboxgroupModal: false,\r\n            headingModal: false,\r\n            textModal: false,\r\n            tableModal: false,\r\n            uploadModal: false,\r\n            tempTable: [],\r\n            tempValue: '',\r\n            questions: [],\r\n            questionsExample: [\r\n                {\r\n                    name: \"Username\",\r\n                    type: \"input\",\r\n                    label: \"Usernamedasssssssssssssssssssssssssssssssssssssssssadssssssssssdassssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\",\r\n                    required: true\r\n                },\r\n                {\r\n                    name: \"Address\",\r\n                    type: \"textarea\",\r\n                    label: \"Address\",\r\n                    required: true\r\n\r\n                },\r\n                {\r\n                    name: \"Age\",\r\n                    type: \"number\",\r\n                    label: \"Age\",\r\n                    required: true\r\n                },\r\n                {\r\n                    type: \"checkbox\",\r\n                    name: \"Remember\",\r\n                    label: \"Remember\",\r\n                    required: true\r\n\r\n                },\r\n                {\r\n                    type: \"radio\",\r\n                    name: \"Size\",\r\n                    label: \"Size\",\r\n                    values: [\"small\", \"medium\", \"large\"],\r\n                    required: true\r\n                },\r\n                {\r\n                    type: \"checkboxgroup\",\r\n                    name: \"Multiple\",\r\n                    label: \"Multiple\",\r\n                    values: [\"A\", \"D\", \"G\"],\r\n                    required: true\r\n                },\r\n                {\r\n                    type: \"row\",\r\n                    values: [\"A\", \"B\", \"C\"],\r\n                },\r\n                {\r\n                    type: \"row\",\r\n                    values: [\"0\", \"1\", \"_switch_\"],\r\n                },\r\n                {\r\n                    type: \"upload\",\r\n                    name: \"Upload\",\r\n                    label: \"Upload\",\r\n                    required: true\r\n                }\r\n            ],\r\n            answersExample: {\r\n                Username: \"Krishnendu\",\r\n                Address: \"1.Rohit Sharma\\\r\n                2.Shikhar Dhawan\\\r\n                \",\r\n                Size: \"medium\",\r\n                Remember: true,\r\n                Age: 22,\r\n                Multiple: [\"A\", \"G\"]\r\n            },\r\n        }\r\n    }\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message\r\n        });\r\n    };\r\n\r\n    handleAddInput = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"input\", required: required, name: label, label: label }],\r\n                inputModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddTextarea = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"textarea\", required: required, name: label, label: label }],\r\n                textareaModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddNumber = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"number\", required: required, name: label, label: label }],\r\n                numberModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckbox = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"checkbox\", name: label, label: label }],\r\n                checkboxModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddText = ({ label }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"text\", name: label, label: label }],\r\n                textModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddHeading = ({ label, type }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"heading\", name: label, label: type }],\r\n                headingModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddSwitch = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"switch\", name: label, label: label }],\r\n                switchModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckboxgroup = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"checkboxgroup\", name: label, required: required, label: label, values: values }],\r\n                    checkboxgroupModal: false\r\n                }\r\n            })\r\n    }\r\n    handleAddRadio = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"radio\", name: label, required: required, label: label, values: values }],\r\n                    radioModal: false\r\n                }\r\n            })\r\n    }\r\n\r\n    handelAddTruthTable = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, ...this.state.tempTable],\r\n                tempTable: [],\r\n                tableModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddUpload = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"upload\", required: required, name: label, label: label }],\r\n                uploadModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n        return (\r\n            <div className=\"form-builder\">\r\n                <div className=\"preview-form\" >\r\n                    <h2>Live Preview</h2>\r\n                    <Form initialValues={this.state.answers} onFinish={(values) => { console.log(values) }}>\r\n\r\n                        {\r\n                            this.state.questions.map(field => {\r\n                                const { type, name, label, required } = field;\r\n\r\n                                switch (type) {\r\n                                    case 'input': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'textarea': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input.TextArea autoSize={{ minRows: 3, maxRows: 100 }} />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'number': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                    )\r\n                                    case 'checkbox': return (\r\n                                        <Form.Item name={name} valuePropName=\"checked\" label={label} initialValue={false}>\r\n                                            <Checkbox></Checkbox>\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'radio': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Radio.Group>\r\n                                                {field.values.map(rad =>\r\n                                                    <Radio value={rad}>{rad}</Radio>)}\r\n                                            </Radio.Group>\r\n\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'switch': return (\r\n                                        <Form.Item name=\"switch\" label=\"Switch\" valuePropName=\"checked\">\r\n                                            <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'text': {\r\n                                        console.log(label)\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'heading': {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                {label === 'h1' ? <h1>{name}</h1> : label === 'h2' ? <h2>{name}</h2> : label === 'h3' ? <h3>{name}</h3> : label === 'h4' ? <h4>{name}</h4> : label === 'h5' ? <h5>{name}</h5> : <h6>{name}</h6>}\r\n                                                {/* <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div> */}\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'checkboxgroup': {\r\n                                        return (\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]}>\r\n                                                <Checkbox.Group>\r\n                                                    {field.values.map(check =>\r\n                                                        <Checkbox value={check}>{check}</Checkbox>)}\r\n                                                </Checkbox.Group>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'row': {\r\n                                        return (\r\n                                            <div className=\"truth-table-row\">\r\n                                                {field.values.map(value => {\r\n                                                    if (value.startsWith('_switch_')) {\r\n                                                        return (\r\n                                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                            </Form.Item>\r\n\r\n                                                        )\r\n                                                        {/* <Form.Item>\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item> */}\r\n                                                    }\r\n                                                    else {\r\n                                                        return (\r\n                                                            <Form.Item >\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item>\r\n                                                        )\r\n                                                    }\r\n                                                })}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'upload': {\r\n                                        return (\r\n                                            <Form.Item name={name} label={label} valuePropName=\"fileList\" getValueFromEvent={normFile} rules={[\r\n                                                { required: required }]}>\r\n                                                <Upload>\r\n                                                    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                                                </Upload>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    default: return null\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                        <Form.Item >\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div className=\"form-tools\">\r\n                    <Button danger onClick={() => this.setState({ questions: [] })}>Delete Form</Button>\r\n                    <Button onClick={() => this.setState({ inputModal: true })}>Input</Button>\r\n                    <Button onClick={() => this.setState({ textareaModal: true })}>Text Area</Button>\r\n                    <Button onClick={() => this.setState({ numberModal: true })}>Input Number</Button>\r\n                    <Button onClick={() => this.setState({ checkboxModal: true })}>Checkbox</Button>\r\n                    <Button onClick={() => this.setState({ checkboxgroupModal: true })}>Checkbox Group</Button>\r\n                    <Button onClick={() => this.setState({ radioModal: true })}>Radio</Button>\r\n                    <Button onClick={() => this.setState({ switchModal: true })}>Switch</Button>\r\n                    <Button onClick={() => this.setState({ textModal: true })}>Text</Button>\r\n                    <Button onClick={() => this.setState({ headingModal: true })}>Heading</Button>\r\n                    <Button onClick={() => this.setState({ tableModal: true })}>Table</Button>\r\n                    <Button onClick={() => this.setState({ uploadModal: true })}>Upload</Button>\r\n\r\n\r\n\r\n                </div>\r\n                <Modal\r\n                    visible={this.state.inputModal}\r\n                    title=\"Input\"\r\n                    onCancel={() => this.setState({ inputModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddInput}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textareaModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ textareaModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextarea}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.numberModal}\r\n                    title=\"Number\"\r\n                    onCancel={() => this.setState({ numberModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddNumber}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxModal}\r\n                    title=\"Check Box\"\r\n                    onCancel={() => this.setState({ checkboxModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckbox}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.switchModal}\r\n                    title=\"Switch\"\r\n                    onCancel={() => this.setState({ switchModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddSwitch}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textModal}\r\n                    title=\"Text\"\r\n                    onCancel={() => this.setState({ textModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddText}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea autoSize />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.headingModal}\r\n                    title=\"Heading\"\r\n                    onCancel={() => this.setState({ headingModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddHeading}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <p>*The greater the number , smaller the heading</p>\r\n                        <Form.Item\r\n                            label=\"Heading type\"\r\n                            name=\"type\"\r\n                            rules={[{ required: true }]}>\r\n                            <Radio.Group>\r\n                                <Radio value={'h1'}>h1</Radio>\r\n                                <Radio value={'h2'}>h2</Radio>\r\n                                <Radio value={'h3'}>h3</Radio>\r\n                                <Radio value={'h4'}>h4</Radio>\r\n                                <Radio value={'h5'}>h5</Radio>\r\n                                <Radio value={'h6'}>h6</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxgroupModal}\r\n                    title=\"CheckBox Group\"\r\n                    onCancel={() => this.setState({ checkboxgroupModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckboxgroup}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.radioModal}\r\n                    title=\"Radio\"\r\n                    onCancel={() => this.setState({ radioModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddRadio}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.tableModal}\r\n                    title=\"Table\"\r\n                    onCancel={() => this.setState({ tableModal: false, tempValue: '', tempTable: [] })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handelAddTruthTable}>\r\n\r\n                        <Button onClick={() => this.setState({ headingModal: true })}>Add Heading?</Button>\r\n                        <Form.Item\r\n                            label=\"Value\"\r\n                        >\r\n                            <Input value={this.state.tempValue} onChange={(e) => { this.setState({ tempValue: e.target.value }) }} style={{ width: \"150px\" }} />\r\n                        </Form.Item>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    if (tempTable.length) {\r\n                                        tempTable[tempTable.length - 1].values.push(tempValue)\r\n                                    }\r\n                                    else {\r\n                                        tempTable.push({\r\n                                            type: \"row\",\r\n                                            values: [tempValue]\r\n                                        })\r\n                                    }\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: ''\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the default value')\r\n                            }}>Add Box</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [tempValue]\r\n                                    })\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: \"\"\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the defult value')\r\n                            }}>Add Box in next row</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable } = this.state\r\n                                if (tempTable.length) {\r\n                                    tempTable[tempTable.length - 1].values.push(\"_switch_\" + uuid())\r\n                                }\r\n                                else {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [\"_switch_\" + uuid()]\r\n                                    })\r\n                                }\r\n                                this.setState(\r\n                                    {\r\n                                        tempTable\r\n                                    }\r\n                                )\r\n                            }}>Add user switch</Button>\r\n                        </div>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Confirm</Button>\r\n                        </Form.Item>\r\n                        <h3>Table Preview</h3>\r\n                        <Form>{this.state.tempTable.map(row => (\r\n                            <div className=\"truth-table-row\">\r\n                                {row.values.map(value => {\r\n                                    if (value.startsWith('_switch_')) {\r\n                                        return (\r\n                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    else {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        ))}</Form>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.uploadModal}\r\n                    title=\"Upload\"\r\n                    onCancel={() => this.setState({ uploadModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddUpload}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default FormBuilder\r\n","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const setFormData = (content) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_FORM_DATA,\r\n        payload: content\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { Form, Input, Button, Upload, notification } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined, InboxOutlined } from '@ant-design/icons';\r\nimport axios from \"axios\"\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { setFormData } from './action';\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\n//JUST UTILITY CODE ONLY!!! NOT PART OF PROJECT\r\n\r\nconst { Dragger } = Upload;\r\n\r\n\r\nclass BuildCircuitBuilder extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            ans: null,\r\n        }\r\n    }\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n        return (\r\n            <div style={{ width: \"800px\", margin: \"auto\", padding: \"20px 0\" }}>\r\n                <Form onFinish={(val) => {\r\n                    const { steps } = val;\r\n                    let success = 1;\r\n                    if (!steps)\r\n                        return\r\n                    let newSteps = steps.map(step => {\r\n                        const { upload_image, upload_side, description } = step;\r\n                        if (upload_side && upload_image[0].response && upload_image[0].response.location && upload_side[0].response && upload_side[0].response.location)\r\n                            return {\r\n                                description,\r\n                                upload_image: [{\r\n                                    name: upload_image[0].name,\r\n                                    // originalFileObj: upload_image[0].originalFileObj,\r\n                                    response: upload_image[0].response,\r\n                                    status: upload_image[0].status,\r\n                                    thumbUrl: upload_image[0].thumbUrl,\r\n                                    uid: upload_image[0].uid\r\n                                }],\r\n                                imagePath: upload_image[0].response.location,\r\n                                upload_side: [{\r\n                                    name: upload_side[0].name,\r\n                                    // originalFileObj: upload_side[0].originalFileObj,\r\n                                    response: upload_side[0].response,\r\n                                    status: upload_side[0].status,\r\n                                    thumbUrl: upload_side[0].thumbUrl,\r\n                                    uid: upload_side[0].uid\r\n                                }],\r\n                                sideImagePath: upload_image[0].response.location\r\n                            }\r\n                        else if (upload_image[0].response && upload_image[0].response.location) {\r\n                            return {\r\n                                description,\r\n                                upload_image: [{\r\n                                    name: upload_image[0].name,\r\n                                    // originalFileObj: upload_image[0].originalFileObj,\r\n                                    response: upload_image[0].response,\r\n                                    status: upload_image[0].status,\r\n                                    thumbUrl: upload_image[0].thumbUrl,\r\n                                    uid: upload_image[0].uid\r\n                                }],\r\n                                imagePath: upload_image[0].response.location,\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            success = 0;\r\n                        }\r\n                    }\r\n                    )\r\n                    if (success) {\r\n\r\n                        this.setState({ ans: { steps: newSteps } });\r\n                        console.log({ steps: newSteps })\r\n                        axios.post(`${baseUrl}/api/course/buildCircuit`, { course_id: \"5f1ef04ec0f8f301d4f0668f\", steps: newSteps })\r\n                            .then(res => console.log(\"hmm seems fine\"))\r\n                            .catch(err => console.log(\"error in adding\"))\r\n                    }\r\n                    else {\r\n                        this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n\r\n                    }\r\n\r\n                }}>\r\n                    <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                        {(fields, { add, remove }) => {\r\n                            return (\r\n                                <div>\r\n                                    {fields.map((field, index) => (\r\n                                        <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                            <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                <Form.Item\r\n                                                    label={`Step${index + 1}`}\r\n                                                    {...field}\r\n                                                    key={\"desc\" + index}\r\n                                                    name={[field.name, 'description']}\r\n                                                    fieldKey={[field.fieldKey, 'description']}\r\n                                                    rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                >\r\n                                                    <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    key={\"upload_image\" + index}\r\n                                                    {...formItemLayoutWithOutLabel}\r\n                                                    name={[field.name, 'upload_image']}\r\n                                                    valuePropName=\"fileList\"\r\n                                                    getValueFromEvent={normFile}\r\n                                                    fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                    rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                >\r\n                                                    <Upload multiple={false} accept=\".png\"\r\n                                                        name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                            const compressedFile = await imageCompression(file, options);\r\n                                                            console.log(\"before compeee\")\r\n                                                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                            console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                            let formData = new FormData()\r\n                                                            formData.set('expId', '123')\r\n                                                            formData.append('file', compressedFile)\r\n                                                            await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                onSuccess(res.data)\r\n                                                                console.log(res.data)\r\n                                                            }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                        }}\r\n                                                        listType=\"picture\"\r\n                                                    >\r\n                                                        <Button>\r\n                                                            <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                    </Upload>\r\n                                                </Form.Item>\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    key={\"upload_side\" + index}\r\n                                                    {...formItemLayoutWithOutLabel}\r\n                                                    name={[field.name, 'upload_side']}\r\n                                                    valuePropName=\"fileList\"\r\n                                                    getValueFromEvent={normFile}\r\n                                                    fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                >\r\n                                                    <Upload multiple={false} accept=\".png\"\r\n                                                        name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                            const compressedFile = await imageCompression(file, options);\r\n                                                            console.log(\"before compeee\")\r\n                                                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                            console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                            console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                            let formData = new FormData()\r\n                                                            formData.set('expId', '123')\r\n                                                            formData.append('file', compressedFile)\r\n                                                            await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                onSuccess(res.data)\r\n                                                                console.log(res.data)\r\n                                                            }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                        }}\r\n                                                        listType=\"picture\"\r\n                                                    >\r\n                                                        <Button>\r\n                                                            <UploadOutlined /> Upload Side Image (if any)\r\n                                                        </Button>\r\n                                                    </Upload>\r\n                                                </Form.Item>\r\n                                            </div>\r\n\r\n\r\n                                            <MinusCircleOutlined\r\n                                                style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                onClick={() => {\r\n                                                    remove(field.name);\r\n                                                }}\r\n                                            />\r\n                                        </div>\r\n\r\n                                    ))}\r\n                                    <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                        <Button\r\n                                            type=\"dashed\"\r\n                                            onClick={() => {\r\n                                                add();\r\n                                            }}\r\n                                            style={{ width: '60%', alignSelf: \"center\" }}\r\n                                        >\r\n                                            <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    </Form.List>\r\n\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                    </Form.Item>\r\n                </Form>\r\n\r\n\r\n                {\r\n                    this.state.ans ?\r\n                        <Form initialValues={this.state.ans} onFinish={(val) => {\r\n                            // this.setState({ ans: val });\r\n                            console.log(val)\r\n                        }}>\r\n                            <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                                {(fields, { add, remove }) => {\r\n                                    return (\r\n                                        <div>\r\n                                            {fields.map((field, index) => (\r\n                                                < div key={field.key} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                    <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                        <Form.Item\r\n                                                            label={`Step${index + 1}`}\r\n                                                            {...field}\r\n                                                            name={[field.name, 'description']}\r\n                                                            fieldKey={[field.fieldKey, 'description']}\r\n                                                            rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                        >\r\n                                                            <Input.TextArea style={{ width: \"90%\" }} />\r\n                                                        </Form.Item>\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_image']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                            rules={[{ required: true, message: 'Missing step image' }]}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\".png\"\r\n                                                                name=\"file\" action={`${baseUrl}/api/uploadExperimentImages?expId=123`} listType=\"picture\">\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Image\r\n          </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_side']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\".png\"\r\n                                                                name=\"file\" action={`${baseUrl}/api/uploadExperimentImages?expId=123`} listType=\"picture\">\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Side Image(if any)\r\n          </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                    </div>\r\n\r\n\r\n                                                    <MinusCircleOutlined\r\n                                                        style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n\r\n                                            ))}\r\n                                            <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                                <Button\r\n                                                    type=\"dashed\"\r\n                                                    onClick={() => {\r\n                                                        add();\r\n                                                    }}\r\n                                                    style={{ width: '60%', alignSelf: \"center\" }}\r\n                                                >\r\n                                                    <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                            </Form.Item>\r\n                                        </div>\r\n                                    );\r\n                                }}\r\n                            </Form.List>\r\n\r\n                            <Form.Item>\r\n                                <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                            </Form.Item>\r\n                        </Form> : null\r\n                }\r\n\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    // formData: state.buildCircuitBuilderReducer.formData\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setFormData: bindActionCreators(setFormData, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BuildCircuitBuilder);\r\n","export const ACTION = {\r\n    GET_MODULES: 'GET_MODULES',\r\n    GET_CURRENT_MODULE: 'GET_CURRENT_MODULE',\r\n    GET_COURSE_TROUBLESHOOT: 'GET_COURSE_TROUBLESHOOT',\r\n    UPDATE_COURSE: 'UPDATE_COURSE',\r\n    UPDATE_SUBMOD: 'UPDATE_SUBMOD',\r\n\r\n};\r\n","import { ACTION } from './constants';\r\nimport axios from 'axios';\r\nimport { baseUrl } from '../../config';\r\n\r\nexport const getSomeData = () => async (dispatch) => {\r\n    const res = await axios.get('/some-api-route');\r\n    console.log(res.data);\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data.modules.courses,\r\n    });\r\n};\r\n\r\nexport const getModules = (type) => async (dispatch) => {\r\n    try {\r\n        console.log('before call');\r\n        const res = await axios.get(`${baseUrl}/api/module/all/${type}`);\r\n        console.log(res.data);\r\n        dispatch({\r\n            type: ACTION.GET_MODULES,\r\n            payload: res.data.modules || [],\r\n        });\r\n    } catch (err) {\r\n        console.log('error in getModules');\r\n    }\r\n};\r\n\r\nexport const getCurrentModule = (id) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/module/get/${id}`);\r\n        console.log(res.data);\r\n        dispatch({\r\n            type: ACTION.GET_CURRENT_MODULE,\r\n            payload: res.data.module,\r\n        });\r\n    } catch (err) {\r\n        console.log('error in getCurrentModule');\r\n    }\r\n};\r\n\r\nexport const getCourseTroubleshoot = (name) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.get(\r\n            `${baseUrl}/api/module/course-troubleshoot/${name}`\r\n        );\r\n        dispatch({\r\n            type: ACTION.GET_COURSE_TROUBLESHOOT,\r\n            payload: res.data.troubleshoot,\r\n        });\r\n    } catch (err) {\r\n        console.log('error in getCourseTroubleshoot');\r\n    }\r\n};\r\n\r\nexport const addCourseTroubleshoot = (name, faqs) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.post(\r\n            `${baseUrl}/api/module/course-troubleshoot/${name}`,\r\n            {\r\n                faqs,\r\n            }\r\n        );\r\n        console.log('res.data', res.data);\r\n        dispatch({\r\n            type: ACTION.GET_COURSE_TROUBLESHOOT,\r\n            payload: res.data.troubleshoot,\r\n        });\r\n    } catch (err) {\r\n        console.log('error in addCourseTroubleshoot');\r\n    }\r\n};\r\n\r\nexport const updateModule = (name,introduction, id) => async (dispatch) => {\r\n    try {\r\n        const res = await axios.post(\r\n            `${baseUrl}/api/module/update-info/${id}`,\r\n            { name,introduction }\r\n        );\r\n        console.log(\"data post:\",res.data);\r\n        dispatch({\r\n            type: ACTION.UPDATE_COURSE,\r\n            payload: [name,introduction],\r\n        });\r\n    } catch (err) {\r\n        console.log('Error in updateModule:' + err);\r\n    }\r\n};\r\n\r\nexport const updateSubModule = (name,id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/update/${id}`, {name})\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.UPDATE_SUBMOD,\r\n            payload: name\r\n        })\r\n    } catch (err) {\r\n        // console.log(\"Failed method : updateModuleName\")\r\n        console.log(err);\r\n    }\r\n\r\n}","import React, { useState } from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport axios from \"axios\"\r\nimport \"./styles.scss\"\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\nconst TextEditor = ({ value = '', onChange }) => {\r\n\r\n    const [answer, setAnswer] = useState('')\r\n\r\n    const onEditorChange = (newAnswer) => {\r\n        setAnswer(newAnswer);\r\n        if (onChange) {\r\n            onChange(newAnswer);\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"text-editor\">\r\n            <Editor\r\n                apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                value={value}\r\n                init={{\r\n                    height: \"50vh\",\r\n                    skin: \"oxide-dark\",\r\n                    // content_css: \"dark\",\r\n                    content_style: '.mce-content-body{background-color:#041D32; color:white}',\r\n                    menubar: false,\r\n                    image_dimensions: false,\r\n                    image_class_list: [\r\n                        { title: 'Responsive', value: 'img-responsive' }\r\n                    ],\r\n                    formats: {\r\n                        nomargin: { selector: 'figure', classes: 'no-margin' }\r\n                    },\r\n                    plugins: [\r\n                        'advlist autolink lists link image',\r\n                        'charmap print preview anchor help',\r\n                        'searchreplace visualblocks code',\r\n                        'insertdatetime media table paste wordcount emoticons',\r\n\r\n                    ],\r\n                    automatic_uploads: true,\r\n                    image_title: true,\r\n                    image_caption: true,\r\n                    file_picker_types: 'image',\r\n                    toolbar:\r\n                        'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n\r\n                    file_picker_callback: (callback, value, meta) => {\r\n                        console.log(\"called\")\r\n                        var input = document.createElement('input');\r\n                        input.setAttribute('type', 'file');\r\n                        input.setAttribute('accept', 'image/*');\r\n                        console.log(\"this\", this)\r\n                        input.onchange = async function () {\r\n                            var file = this.files[0];\r\n                            console.log(\"before compeee\")\r\n                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                            const options = {\r\n                                maxSizeMB: 1,\r\n                                maxWidthOrHeight: 920,\r\n                                useWebWorker: true\r\n                            }\r\n                            try {\r\n                                const compressedFile = await imageCompression(file, options);\r\n\r\n                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                let formData = new FormData();\r\n                                formData.set('expId', '12345')//maybe in future pass some props\r\n                                formData.append('file', compressedFile)\r\n\r\n                                await axios.post(`${baseUrl}/api/upload/introduction`, formData).then(\r\n                                    res => {\r\n                                        console.log(\"res.data\", res.data)\r\n                                        console.log(\"path\", process.env.PUBLIC_URL)\r\n                                        callback(res.data.location, {\r\n                                            alt: res.data.originalName\r\n                                        })\r\n                                    }\r\n                                ).catch(err => console.log(\"error in uploading image\"))\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"an erron man , probly while compressing\")\r\n                            }\r\n                        };\r\n                        input.click()\r\n                    },\r\n                    paste_data_images: true,\r\n                }}\r\n                onEditorChange={onEditorChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default TextEditor","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addCourseTroubleshoot, getCourseTroubleshoot, getModules } from './action'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Link } from \"react-router-dom\"\r\nimport { MODULE, SUBMODULE, GETTINGSTARTED } from '../../config'\r\nimport './styles.scss'\r\nimport { Form, Input, Button, notification, Tabs, Col, Divider } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, } from '@ant-design/icons';\r\nimport TextEditor from '../TextEditor/text'\r\nconst { TabPane } = Tabs;\r\n\r\n\r\n\r\nclass Modules extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            selectedWindow: 'modules-tab',\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        await this.props.getModules(this.props.match.params.type);\r\n        await this.props.getCourseTroubleshoot(this.props.match.params.type);\r\n        console.log('after fetch');\r\n    };\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n    changeCurrentWindow = (selectedOptionWord) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedWindow: selectedOptionWord,\r\n        });\r\n    };\r\n    render() {\r\n        const { modules } = this.props;\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        return (\r\n            <div className=\"card-container\">\r\n                <Tabs type=\"card\" centered>\r\n                    <TabPane tab=\"Modules\" key=\"1\">\r\n                        <Col justify=\"space-around\" align=\"middle\">\r\n                            <Divider>All {this.props.match.params.type} {MODULE}s</Divider>\r\n                            {modules.map(module => (\r\n                                <>\r\n                                    {module.name !== GETTINGSTARTED + \"ignore\" &&\r\n                                        <Link to={`/admin/${this.props.match.params.type}/module/${module._id}`}>\r\n                                            <div>{module.name}</div>\r\n                                        </Link>\r\n                                    }\r\n                                </>\r\n                            ))}\r\n                            <br />\r\n                            <Link to={`/admin/${this.props.match.params.type}/add-module`}><Button style={{ margin: \"10px\" }}>Add {MODULE}</Button></Link>\r\n                            <br />\r\n                            {!modules.some(el => el.name === GETTINGSTARTED) &&\r\n                                <Link to={`/admin/${this.props.match.params.type}/add-starter`}><Button style={{ margin: \"10px\" }}>Add Geting Started {MODULE}</Button></Link>\r\n                            }\r\n                            {modules.some(el => el.name === GETTINGSTARTED) &&\r\n                                <Link to={`/admin/${this.props.match.params.type}/add-course/${modules.find(el => el.name === GETTINGSTARTED)._id}`}><Button style={{ margin: \"10px\" }}>Add Getting Started {SUBMODULE}</Button></Link>\r\n                            }\r\n                        </Col>\r\n                    </TabPane>\r\n                    <TabPane tab=\"Course Troubleshoot\" key=\"2\">\r\n                        <Col justify=\"space-around\" align=\"middle\">\r\n                            <Divider>COURSE-LEVEL-TROUBLESHOOT</Divider>\r\n\r\n                            <div style={{ width: \"800px\", margin: \"auto\", padding: \"20px 0\" }}>\r\n                                ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.troubleshoot} onFinish={async (val) => {\r\n                                    console.log(\"valllll\", val)\r\n                                    const { faqs } = val;\r\n                                    if (faqs.length) {\r\n\r\n                                        this.setState({ loading: true })\r\n                                        await this.props.addCourseTroubleshoot(this.props.match.params.type, faqs)\r\n                                        this.setState({ loading: false })\r\n                                    } else {\r\n                                        this.openNotificationWithIcon('error', 'Please make sure at least one FAQ is there')\r\n                                    }\r\n\r\n                                }}>\r\n\r\n                                    <Form.List name=\"faqs\" label=\"faqs\" rules={[{ required: true }]}>\r\n                                        {(fields, { add, remove }) => {\r\n                                            return (\r\n                                                <div>\r\n                                                    {fields.map((field, index) => (\r\n                                                        <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                            <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                                <Form.Item\r\n                                                                    label={`Question${index + 1}`}\r\n                                                                    {...field}\r\n                                                                    key={\"desc\" + index}\r\n                                                                    name={[field.name, 'question']}\r\n                                                                    fieldKey={[field.fieldKey, 'question']}\r\n                                                                    rules={[{ required: true, message: 'Missing Step Question' }]}\r\n                                                                >\r\n                                                                    <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                                </Form.Item>\r\n                                                                <Form.Item\r\n                                                                    label={`Answer${index + 1}`}\r\n                                                                    {...field}\r\n                                                                    key={\"desc\" + index}\r\n                                                                    name={[field.name, 'answer']}\r\n                                                                    fieldKey={[field.fieldKey, 'answer']}\r\n                                                                // rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n                                                                >\r\n                                                                    <TextEditor />\r\n\r\n                                                                </Form.Item>\r\n                                                            </div>\r\n\r\n                                                            <MinusCircleOutlined\r\n                                                                style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                                onClick={() => {\r\n                                                                    remove(field.name);\r\n                                                                }}\r\n                                                            />\r\n                                                        </div>\r\n                                                    ))}\r\n                                                    <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                                        <Button\r\n                                                            type=\"dashed\"\r\n                                                            onClick={() => {\r\n                                                                add();\r\n                                                            }}\r\n                                                            style={{ width: '60%', alignSelf: \"center\" }}\r\n                                                        >\r\n                                                            <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                                    </Form.Item>\r\n                                                </div>\r\n                                            );\r\n                                        }}\r\n                                    </Form.List>\r\n\r\n                                    <Form.Item>\r\n                                        <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                                    </Form.Item>\r\n\r\n                                </Form>\r\n                            </div>\r\n\r\n                        </Col>\r\n                    </TabPane>\r\n                </Tabs>\r\n            </div>\r\n        )\r\n\r\n        //     <div>\r\n        //         <div>\r\n        //             All {this.props.match.params.type} {MODULE}s\r\n        //         </div>\r\n        //         <div className=\"allmodules-container\">\r\n        //             <div className=\"allmodules-navbar\">\r\n        //                 <div className=\"allmodules-name\">\r\n        //                     {this.props.match.params.type.toUpperCase()}\r\n        //                 </div>\r\n        //                 <div className=\"navbar-horizontal\">\r\n        //                     <button\r\n        //                         className=\"modules-tab\"\r\n        //                         onClick={() =>\r\n        //                             this.changeCurrentWindow('modules-tab')\r\n        //                         }\r\n        //                     >\r\n        //                         {MODULE.toUpperCase()}S\r\n        //                     </button>\r\n        //                     <button\r\n        //                         className=\"faqs-tab\"\r\n        //                         onClick={() =>\r\n        //                             this.changeCurrentWindow('faqs-tab')\r\n        //                         }\r\n        //                     >\r\n        //                         FAQS\r\n        //                     </button>\r\n        //                 </div>\r\n        //             </div>\r\n\r\n        //             {this.state.selectedWindow === 'faqs-tab' ? (\r\n        //                 <div\r\n        //                     style={{\r\n        //                         width: '800px',\r\n        //                         margin: 'auto',\r\n        //                         padding: '20px 0',\r\n        //                     }}\r\n        //                 >\r\n        //                     <p>\r\n        //                         <u>COURSE-LEVEL-TROUBLESHOOT</u>\r\n        //                     </p>\r\n        //                     ***Don't Reload before Saving! Changes may get lost\r\n        //                     ***\r\n        //                     {\r\n        //                         this.props.troubleshoot ?\r\n        //                             (\r\n        //                                 <Form\r\n        //                                     initialValues={this.props.troubleshoot}\r\n        //                                     onFinish={async (val) => {\r\n        //                                         console.log('valllll', val);\r\n        //                                         const { faqs } = val;\r\n        //                                         if (faqs.length) {\r\n        //                                             this.setState({ loading: true });\r\n        //                                             await this.props.addCourseTroubleshoot(\r\n        //                                                 this.props.match.params.type,\r\n        //                                                 faqs\r\n        //                                             );\r\n        //                                             this.setState({ loading: false });\r\n        //                                         } else {\r\n        //                                             this.openNotificationWithIcon(\r\n        //                                                 'error',\r\n        //                                                 'Please make sure at least one FAQ is there'\r\n        //                                             );\r\n        //                                         }\r\n        //                                     }}\r\n        //                                 >\r\n        //                                     <Form.List\r\n        //                                         name=\"faqs\"\r\n        //                                         label=\"faqs\"\r\n        //                                         rules={[{ required: true }]}\r\n        //                                     >\r\n        //                                         {(fields, { add, remove }) => {\r\n        //                                             return (\r\n        //                                                 <div>\r\n        //                                                     {fields.map((field, index) => (\r\n        //                                                         <div\r\n        //                                                             key={'unique' + index}\r\n        //                                                             style={{\r\n        //                                                                 display: 'flex',\r\n        //                                                                 alignItems:\r\n        //                                                                     'center',\r\n        //                                                             }}\r\n        //                                                         >\r\n        //                                                             <div\r\n        //                                                                 style={{\r\n        //                                                                     display: 'flex',\r\n        //                                                                     flexDirection:\r\n        //                                                                         'column',\r\n        //                                                                     width: '100%',\r\n        //                                                                 }}\r\n        //                                                             >\r\n        //                                                                 <Form.Item\r\n        //                                                                     label={`Question${index + 1\r\n        //                                                                         }`}\r\n        //                                                                     {...field}\r\n        //                                                                     key={\r\n        //                                                                         'desc' +\r\n        //                                                                         index\r\n        //                                                                     }\r\n        //                                                                     name={[\r\n        //                                                                         field.name,\r\n        //                                                                         'question',\r\n        //                                                                     ]}\r\n        //                                                                     fieldKey={[\r\n        //                                                                         field.fieldKey,\r\n        //                                                                         'question',\r\n        //                                                                     ]}\r\n        //                                                                     rules={[\r\n        //                                                                         {\r\n        //                                                                             required: true,\r\n        //                                                                             message:\r\n        //                                                                                 'Missing Step Question',\r\n        //                                                                         },\r\n        //                                                                     ]}\r\n        //                                                                 >\r\n        //                                                                     <Input.TextArea\r\n        //                                                                         style={{\r\n        //                                                                             width:\r\n        //                                                                                 '90%',\r\n        //                                                                         }}\r\n        //                                                                         autoSize={{\r\n        //                                                                             minRows: 2,\r\n        //                                                                         }}\r\n        //                                                                     />\r\n        //                                                                 </Form.Item>\r\n        //                                                                 <Form.Item\r\n        //                                                                     label={`Answer${index + 1\r\n        //                                                                         }`}\r\n        //                                                                     {...field}\r\n        //                                                                     key={\r\n        //                                                                         'desc' +\r\n        //                                                                         index\r\n        //                                                                     }\r\n        //                                                                     name={[\r\n        //                                                                         field.name,\r\n        //                                                                         'answer',\r\n        //                                                                     ]}\r\n        //                                                                     fieldKey={[\r\n        //                                                                         field.fieldKey,\r\n        //                                                                         'answer',\r\n        //                                                                     ]}\r\n        //                                                                 // rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n        //                                                                 >\r\n        //                                                                     <TextEditor />\r\n        //                                                                 </Form.Item>\r\n        //                                                             </div>\r\n\r\n        //                                                             <MinusCircleOutlined\r\n        //                                                                 style={{\r\n        //                                                                     color: 'red',\r\n        //                                                                     fontSize:\r\n        //                                                                         '20px',\r\n        //                                                                 }}\r\n        //                                                                 onClick={() => {\r\n        //                                                                     remove(\r\n        //                                                                         field.name\r\n        //                                                                     );\r\n        //                                                                 }}\r\n        //                                                             />\r\n        //                                                         </div>\r\n        //                                                     ))}\r\n        //                                                     <Form.Item\r\n        //                                                         {...formItemLayoutWithOutLabel}\r\n        //                                                     >\r\n        //                                                         <Button\r\n        //                                                             type=\"dashed\"\r\n        //                                                             onClick={() => {\r\n        //                                                                 add();\r\n        //                                                             }}\r\n        //                                                             style={{\r\n        //                                                                 width: '60%',\r\n        //                                                                 alignSelf: 'center',\r\n        //                                                             }}\r\n        //                                                         >\r\n        //                                                             <PlusOutlined /> Add\r\n        //                                                         Question\r\n        //                                                     </Button>\r\n        //                                                     </Form.Item>\r\n        //                                                 </div>\r\n        //                                             );\r\n        //                                         }}\r\n        //                                     </Form.List>\r\n\r\n        //                                     <Form.Item>\r\n        //                                         <Button\r\n        //                                             loading={this.state.loading}\r\n        //                                             type=\"primary\"\r\n        //                                             htmlType=\"submit\"\r\n        //                                         >\r\n        //                                             Save/Update\r\n        //                                     </Button>\r\n        //                                     </Form.Item>\r\n        //                                     <p>\r\n        //                                         ***Update only if any changes are made,\r\n        //                                         otherwise it may take time***\r\n        //                                 </p>\r\n        //                                 </Form>\r\n        //                             )\r\n        //                             : null\r\n        //                     }\r\n\r\n        //                 </div>\r\n        //             ) : (\r\n        //                     <div\r\n        //                         style={{\r\n        //                             width: '800px',\r\n        //                             margin: 'auto',\r\n        //                             padding: '20px 0',\r\n        //                             fontSize: '150%',\r\n        //                         }}\r\n        //                     >\r\n        //                         {modules.map((module) => (\r\n        //                             <>\r\n        //                                 {module.name !==\r\n        //                                     GETTINGSTARTED + 'ignore' && (\r\n        //                                         <Link\r\n        //                                             to={`/admin/${this.props.match.params.type}/module/${module._id}`}\r\n        //                                         >\r\n        //                                             <div>⁜ {module.name}</div>\r\n        //                                         </Link>\r\n        //                                     )}\r\n        //                             </>\r\n        //                         ))}\r\n        //                         <br />\r\n        //                         <Link\r\n        //                             to={`/admin/${this.props.match.params.type}/add-module`}\r\n        //                         >\r\n        //                             <Button>Add {MODULE}</Button>\r\n        //                         </Link>\r\n        //                     </div>\r\n        //                 )}\r\n        //         </div>\r\n\r\n\r\n        //         <br />\r\n        //         {!modules.some((el) => el.name === GETTINGSTARTED) && (\r\n        //             <Link to={`/admin/${this.props.match.params.type}/add-starter`}>\r\n        //                 <Button>Add Starter {MODULE}</Button>\r\n        //             </Link>\r\n        //         )}\r\n        //         {modules.some((el) => el.name === GETTINGSTARTED) && (\r\n        //             <Link\r\n        //                 to={`/admin/${this.props.match.params.type}/add-course/${modules.find((el) => el.name === GETTINGSTARTED)._id\r\n        //                     }`}\r\n        //             >\r\n        //                 <Button>Add Starter {SUBMODULE}</Button>\r\n        //             </Link>\r\n        //         )}\r\n        //     </div>\r\n        // );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    modules: state.modulesReducer.modules,\r\n    troubleshoot: state.modulesReducer.courseTroubleshoot,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getModules: bindActionCreators(getModules, dispatch),\r\n    getCourseTroubleshoot: bindActionCreators(getCourseTroubleshoot, dispatch),\r\n    addCourseTroubleshoot: bindActionCreators(addCourseTroubleshoot, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Modules);\r\n","import React from 'react';\r\nimport { Editor } from '@tinymce/tinymce-react';\r\nimport axios from \"axios\"\r\nimport \"./styles.scss\"\r\nimport imageCompression from 'browser-image-compression';\r\nimport { baseUrl } from '../../config';\r\n\r\nconst TextEditor = ({ handleEditorChange, content }) => {\r\n\r\n    return (\r\n        <div className=\"text-editor\">\r\n            <Editor\r\n                apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                value={content}\r\n                init={{\r\n                    height: \"90vh\",\r\n                    skin: \"oxide-dark\",\r\n                    // content_css: \"dark\",\r\n                    content_style: '.mce-content-body{background-color:#041D32; color:white}',\r\n                    menubar: false,\r\n                    image_dimensions: false,\r\n                    image_class_list: [\r\n                        { title: 'Responsive', value: 'img-responsive' }\r\n                    ],\r\n                    formats: {\r\n                        nomargin: { selector: 'figure', classes: 'no-margin' }\r\n                    },\r\n                    plugins: [\r\n                        'advlist autolink lists link image',\r\n                        'charmap print preview anchor help',\r\n                        'searchreplace visualblocks code',\r\n                        'insertdatetime media table paste wordcount emoticons',\r\n\r\n                    ],\r\n                    automatic_uploads: true,\r\n                    image_title: true,\r\n                    image_caption: true,\r\n                    file_picker_types: 'image',\r\n                    toolbar:\r\n                        'undo redo | formatselect | bold italic | \\\r\n            alignleft aligncenter alignright | \\\r\n            bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n\r\n                    file_picker_callback: (callback, value, meta) => {\r\n                        console.log(\"called\")\r\n                        var input = document.createElement('input');\r\n                        input.setAttribute('type', 'file');\r\n                        input.setAttribute('accept', 'image/*');\r\n                        console.log(\"this\", this)\r\n                        input.onchange = async function () {\r\n                            var file = this.files[0];\r\n                            console.log(\"before compeee\")\r\n                            console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                            console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                            const options = {\r\n                                maxSizeMB: 1,\r\n                                maxWidthOrHeight: 920,\r\n                                useWebWorker: true\r\n                            }\r\n                            try {\r\n                                const compressedFile = await imageCompression(file, options);\r\n\r\n                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                let formData = new FormData();\r\n                                formData.set('expId', '12345')//maybe in future pass some props\r\n                                formData.append('file', compressedFile)\r\n\r\n                                await axios.post(`${baseUrl}/api/upload/introduction`, formData).then(\r\n                                    res => {\r\n                                        console.log(\"res.data\", res.data)\r\n                                        console.log(\"path\", process.env.PUBLIC_URL)\r\n                                        callback(res.data.location, {\r\n                                            alt: res.data.originalName\r\n                                        })\r\n                                    }\r\n                                ).catch(err => console.log(\"error in uploading image\"))\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"an erron man , probly while compressing\")\r\n                            }\r\n                        };\r\n                        input.click()\r\n                    },\r\n                    paste_data_images: true,\r\n                }}\r\n                onEditorChange={handleEditorChange}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default TextEditor","export const ACTION = {\r\n    ADD_MODULE_SUCCESS: 'ADD_MODULE_SUCCESS',\r\n    SET_MODULE_NAME: \"SET_MODULE_NAME\",\r\n    SET_MODULE_INTRODUCTION: \"SET_MODULE_INTRODUCTION\",\r\n    CLEAR_ADD_MODULE: \"CLEAR_ADD_MODULE\"\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from '../../../config';\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    console.log(res.data)\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const addModule = (name, introduction, type) => async dispatch => {\r\n    try {\r\n        console.log(\"before call\")\r\n        const res = await axios.post(`${baseUrl}/api/module/add`, { name, introduction, type })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_MODULE_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addModules\")\r\n    }\r\n\r\n}\r\n\r\nexport const setModuleName = (name) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_NAME,\r\n        payload: name\r\n    })\r\n}\r\n\r\nexport const setModuleIntroduction = (introduction) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_INTRODUCTION,\r\n        payload: introduction\r\n    })\r\n}\r\n\r\nexport const clearAddModule = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ADD_MODULE\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { getModules } from '../action'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Link } from \"react-router-dom\"\r\nimport { Button, Form, Input, notification } from 'antd'\r\nimport TextEditor from '../../TextEditor'\r\nimport \"./styles.scss\"\r\nimport { setModuleIntroduction, addModule, setModuleName, clearAddModule } from './action'\r\nclass AddModule extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const { name, introduction, addModule, clearAddModule } = this.props;\r\n        if (name && introduction) {\r\n            this.setState({ loading: true })\r\n            await addModule(name, introduction, this.props.match.params.type);\r\n            this.setState({ loading: false })\r\n            clearAddModule()\r\n            this.props.history.goBack()\r\n        } else {\r\n            this.openNotificationWithIcon('warning', 'Please fill all the fields')\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { name, introduction, setModuleName, setModuleIntroduction } = this.props;\r\n        return (\r\n            <div className=\"add-module\" >\r\n                <h2>Add Module</h2>\r\n                <Form.Item label=\"Name\" rules={[{ required: true }]} >\r\n                    <Input value={name} onChange={(e) => setModuleName(e.target.value)} />\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\">\r\n                    <TextEditor content={introduction} handleEditorChange={setModuleIntroduction} />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button loading={this.state.loading} onClick={this.handleSubmit} type=\"primary\" htmlType=\"submit\">ADD MODULE</Button>\r\n                </Form.Item>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    name: state.addModuleReducer.name,\r\n    introduction: state.addModuleReducer.introduction\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setModuleName: bindActionCreators(setModuleName, dispatch),\r\n    setModuleIntroduction: bindActionCreators(setModuleIntroduction, dispatch),\r\n    addModule: bindActionCreators(addModule, dispatch),\r\n    clearAddModule: bindActionCreators(clearAddModule, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddModule)\r\n","export const ACTION = {\r\n    ADD_MODULE_SUCCESS: 'ADD_MODULE_SUCCESS',\r\n    SET_MODULE_NAME: \"SET_MODULE_NAME\",\r\n    SET_MODULE_INTRODUCTION: \"SET_MODULE_INTRODUCTION\",\r\n    CLEAR_ADD_MODULE: \"CLEAR_ADD_MODULE\"\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from '../../../config';\r\nexport const getSomeData = () => async dispatch => {\r\n    const res = await axios.get(\"/some-api-route\");\r\n    console.log(res.data)\r\n    dispatch({\r\n        type: ACTION.GET_SOME_DATA,\r\n        payload: res.data\r\n    })\r\n}\r\n\r\nexport const addModule = (name, introduction, type) => async dispatch => {\r\n    try {\r\n        console.log(\"before call\")\r\n        const res = await axios.post(`${baseUrl}/api/module/add`, { name, introduction, type })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_MODULE_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addModules\")\r\n    }\r\n\r\n}\r\n\r\nexport const setModuleName = (name) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_NAME,\r\n        payload: name\r\n    })\r\n}\r\n\r\nexport const setModuleIntroduction = (introduction) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_MODULE_INTRODUCTION,\r\n        payload: introduction\r\n    })\r\n}\r\n\r\nexport const clearAddModule = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ADD_MODULE\r\n    })\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Button, Form, Input, notification } from 'antd'\r\nimport TextEditor from '../../TextEditor'\r\nimport \"./styles.scss\"\r\nimport { setModuleIntroduction, addModule, setModuleName, clearAddModule } from './action'\r\nimport { GETTINGSTARTED } from '../../../config'\r\nclass AddModuleConf extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const { introduction, addModule, clearAddModule } = this.props;\r\n        const name = GETTINGSTARTED;\r\n        if (name && introduction) {\r\n            this.setState({ loading: true })\r\n            await addModule(name, introduction, this.props.match.params.type);\r\n            this.setState({ loading: false })\r\n            clearAddModule()\r\n            this.props.history.goBack()\r\n        } else {\r\n            this.openNotificationWithIcon('warning', 'Please fill all the fields')\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { name, introduction, setModuleName, setModuleIntroduction } = this.props;\r\n        return (\r\n            <div className=\"add-module\" style={{ \"display\": \"flex\", \"flexDirection\": \"column\", justifyContent: \"center\" }}>\r\n                <Form\r\n                initialValues={{\r\n                    [\"name\"]: GETTINGSTARTED\r\n                }}\r\n                >\r\n                <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true }]} >\r\n                    <Input readOnly={true}/>\r\n                </Form.Item>\r\n                <Form.Item label=\"Description\">\r\n                    <TextEditor content={introduction} handleEditorChange={setModuleIntroduction} />\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button loading={this.state.loading} onClick={this.handleSubmit} type=\"primary\" htmlType=\"submit\">ADD MODULE</Button>\r\n                </Form.Item>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    name: state.addModuleReducer.name,\r\n    introduction: state.addModuleReducer.introduction\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setModuleName: bindActionCreators(setModuleName, dispatch),\r\n    setModuleIntroduction: bindActionCreators(setModuleIntroduction, dispatch),\r\n    addModule: bindActionCreators(addModule, dispatch),\r\n    clearAddModule: bindActionCreators(clearAddModule, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddModuleConf)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getCurrentModule, updateModule, updateSubModule } from '../action';\r\nimport { Link } from 'react-router-dom';\r\nimport { Form, Input, Button, Divider, Row } from 'antd';\r\nimport { baseUrl, SUBMODULE } from '../../../config';\r\nimport './styles.scss';\r\nimport imageCompression from 'browser-image-compression';\r\nimport axios from 'axios';\r\n\r\nimport { Editor } from '@tinymce/tinymce-react';\r\n\r\nclass Module extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedWindow: 'module-details',\r\n            name: '',\r\n            introduction: '',\r\n        };\r\n        this.handleEditorChange = this.handleEditorChange.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.match.params.id);\r\n        this.props.getCurrentModule(this.props.match.params.id);\r\n    }\r\n\r\n    changeCurrentWindow = (selectedOptionWord) => {\r\n        this.setState({\r\n            ...this.state,\r\n            selectedWindow: selectedOptionWord,\r\n        });\r\n    };\r\n    handleEditorChange(e) {\r\n        // console.log('Content was updated:', e.target.getContent());\r\n        this.setState({ introduction: e.target.getContent() });\r\n    }\r\n    onFinish = async (event) => {\r\n        // event.preventDefault();\r\n        // console.log('You are submitting ' + JSON.stringify(this.props.module));\r\n        await this.props.updateModule(\r\n            event.name,\r\n            this.state.introduction,\r\n            this.props.match.params.id\r\n        );\r\n        this.props.history.goBack();\r\n    };\r\n    onSubFinish = async (values) => {\r\n        await this.props.updateSubModule(values.name, values.id);\r\n        // this.props.history.goBack()\r\n    };\r\n    render() {\r\n        const { module } = this.props;\r\n        if (module)\r\n            return (\r\n                <div className=\"module-container\">\r\n                    <div className=\"module-navbar\">\r\n                        <div className=\"module-name\">\r\n                            {module.name ? module.name.toUpperCase() : ''}\r\n                        </div>\r\n                        <div className=\"navbar-horizontal\">\r\n                            <button\r\n                                className=\"module-details\"\r\n                                onClick={() =>\r\n                                    this.changeCurrentWindow('module-details')\r\n                                }\r\n                            >\r\n                                MODULE DETAILS\r\n                            </button>\r\n\r\n                            <button\r\n                                className=\"submodule-name\"\r\n                                onClick={() =>\r\n                                    this.changeCurrentWindow('submodule-name')\r\n                                }\r\n                            >\r\n                                {SUBMODULE.toUpperCase()}S\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* SHOW MODULE DETAILS / SUBMODULES*/}\r\n                    {this.state.selectedWindow === 'module-details' ? (\r\n                        <Form\r\n                            className=\"module-form\"\r\n                            key={'uniq' + module.introduction}\r\n                            name=\"update-form\"\r\n                            onFinish={this.onFinish}\r\n                            labelCol={{ span: 8 }}\r\n                            wrapperCol={{ span: 16 }}\r\n                            initialValues={{ name: module.name }}\r\n                        >\r\n                            <Form.Item label=\"Name\">\r\n                                <Form.Item\r\n                                    name=\"name\"\r\n                                    noStyle\r\n                                    rules={[\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'This field is required',\r\n                                        },\r\n                                    ]}\r\n                                >\r\n                                    <Input\r\n                                        name=\"name\"\r\n                                        style={{ width: 160 }}\r\n                                        placeholder={module.name}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Form.Item>\r\n                            <Form.Item label=\"Description\">\r\n                                <Form.Item\r\n                                    name=\"introduction\"\r\n                                    noStyle\r\n                                // rules={[\r\n                                //     {\r\n                                //         required: true,\r\n                                //         message: 'This field is required',\r\n                                //     },\r\n                                // ]}\r\n                                >\r\n                                    {/* <Input\r\n                                        name=\"introduction\"\r\n                                        style={{ width: 260, height: '7vw' }}\r\n                                        placeholder={module.introduction}\r\n                                    /> */}\r\n                                    <Editor\r\n                                        textareaName=\"introduction\"\r\n                                        apiKey=\"n7942578kkai07fww91ixztab3vfa874swodd4i2e1ymki4i\"\r\n                                        init={{\r\n                                            height: '90vh',\r\n                                            skin: 'oxide-dark',\r\n                                            content_style:\r\n                                                '.mce-content-body{background-color:#041D32; color:white}',\r\n                                            menubar: false,\r\n                                            image_dimensions: false,\r\n                                            image_class_list: [\r\n                                                {\r\n                                                    title: 'Responsive',\r\n                                                    value: 'img-responsive',\r\n                                                },\r\n                                            ],\r\n                                            formats: {\r\n                                                nomargin: {\r\n                                                    selector: 'figure',\r\n                                                    classes: 'no-margin',\r\n                                                },\r\n                                            },\r\n                                            plugins: [\r\n                                                'advlist autolink lists link image',\r\n                                                'charmap print preview anchor help',\r\n                                                'searchreplace visualblocks code',\r\n                                                'insertdatetime media table paste wordcount emoticons',\r\n                                            ],\r\n                                            automatic_uploads: true,\r\n                                            image_title: true,\r\n                                            image_caption: true,\r\n                                            file_picker_types: 'image',\r\n                                            toolbar:\r\n                                                'undo redo | formatselect | bold italic | \\\r\n                                alignleft aligncenter alignright | \\\r\n                                bullist numlist outdent indent  | image table  | fontselect fontsizeselect|link | forecolor backcolor  |  emoticons | preview',\r\n\r\n                                            file_picker_callback: (\r\n                                                callback,\r\n                                                value,\r\n                                                meta\r\n                                            ) => {\r\n                                                console.log('called');\r\n                                                var input = document.createElement(\r\n                                                    'input'\r\n                                                );\r\n                                                input.setAttribute(\r\n                                                    'type',\r\n                                                    'file'\r\n                                                );\r\n                                                input.setAttribute(\r\n                                                    'accept',\r\n                                                    'image/*'\r\n                                                );\r\n                                                console.log('this', this);\r\n                                                input.onchange = async function () {\r\n                                                    var file = this.files[0];\r\n                                                    console.log(\r\n                                                        'before compeee'\r\n                                                    );\r\n                                                    console.log(\r\n                                                        'originalFile instanceof Blob',\r\n                                                        file instanceof Blob\r\n                                                    ); // true\r\n                                                    console.log(\r\n                                                        `originalFile size ${file.size /\r\n                                                        1024 /\r\n                                                        1024\r\n                                                        } MB`\r\n                                                    );\r\n                                                    const options = {\r\n                                                        maxSizeMB: 1,\r\n                                                        maxWidthOrHeight: 920,\r\n                                                        useWebWorker: true,\r\n                                                    };\r\n                                                    try {\r\n                                                        const compressedFile = await imageCompression(\r\n                                                            file,\r\n                                                            options\r\n                                                        );\r\n\r\n                                                        console.log(\r\n                                                            'compressedFile instanceof Blob',\r\n                                                            compressedFile instanceof\r\n                                                            Blob\r\n                                                        ); // true\r\n                                                        console.log(\r\n                                                            `compressedFile size ${compressedFile.size /\r\n                                                            1024 /\r\n                                                            1024\r\n                                                            } MB`\r\n                                                        );\r\n                                                        let formData = new FormData();\r\n                                                        formData.set(\r\n                                                            'expId',\r\n                                                            '12345'\r\n                                                        );\r\n                                                        formData.append(\r\n                                                            'file',\r\n                                                            compressedFile\r\n                                                        );\r\n\r\n                                                        await axios\r\n                                                            .post(\r\n                                                                `${baseUrl}/api/upload/introduction`,\r\n                                                                formData\r\n                                                            )\r\n                                                            .then((res) => {\r\n                                                                console.log(\r\n                                                                    'res.data',\r\n                                                                    res.data\r\n                                                                );\r\n                                                                console.log(\r\n                                                                    'path',\r\n                                                                    process.env\r\n                                                                        .PUBLIC_URL\r\n                                                                );\r\n                                                                callback(\r\n                                                                    res.data\r\n                                                                        .location,\r\n                                                                    {\r\n                                                                        alt:\r\n                                                                            res\r\n                                                                                .data\r\n                                                                                .originalName,\r\n                                                                    }\r\n                                                                );\r\n                                                            })\r\n                                                            .catch((err) =>\r\n                                                                console.log(\r\n                                                                    'error in uploading image'\r\n                                                                )\r\n                                                            );\r\n                                                    } catch (err) {\r\n                                                        console.log(\r\n                                                            'an erron man , probly while compressing'\r\n                                                        );\r\n                                                    }\r\n\r\n                                                    // console.log('images', file)\r\n                                                    // var reader = new FileReader();\r\n                                                    // reader.onload = function (e) {\r\n                                                    //   var id = 'blobid' + (new Date()).getTime();\r\n                                                    //   console.log('name', e.target.result)\r\n                                                    //   callback('logo192.png', {\r\n                                                    //     alt: file.name\r\n                                                    //   })\r\n                                                    // }\r\n                                                    // reader.readAsDataURL(file)\r\n                                                };\r\n                                                input.click();\r\n                                            },\r\n                                            paste_data_images: true,\r\n                                        }}\r\n                                        initialValue={module.introduction}\r\n                                        onChange={this.handleEditorChange}\r\n                                    />\r\n                                </Form.Item>\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    style={{ marginLeft: '50%' }}\r\n                                >\r\n                                    Update\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    ) : (\r\n                            <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"center\", alignItems: \"center\", paddingBottom: \"20px\" }}>\r\n                                <ol className=\"submodule-list\">\r\n                                    {module.courses &&\r\n                                        module.courses.map((course) => (\r\n                                            <>\r\n                                                <Divider />\r\n                                                <Form\r\n                                                    name=\"update-form\"\r\n                                                    layout={'inline'}\r\n                                                    onFinish={this.onSubFinish}\r\n                                                    initialValues={{\r\n                                                        name: course.name,\r\n                                                        id: course._id,\r\n                                                    }}\r\n                                                >\r\n                                                    <Form.Item\r\n                                                        name=\"name\"\r\n                                                        noStyle\r\n                                                        rules={[\r\n                                                            {\r\n                                                                required: true,\r\n                                                                message:\r\n                                                                    'This field is required',\r\n                                                            },\r\n                                                        ]}\r\n                                                    >\r\n                                                        <Input\r\n                                                            name=\"name\"\r\n                                                            style={{ width: 160 }}\r\n                                                            placeholder={\r\n                                                                course.name\r\n                                                            }\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item name=\"id\" noStyle>\r\n                                                        <Input\r\n                                                            name=\"id\"\r\n                                                            style={{\r\n                                                                display: 'none',\r\n                                                            }}\r\n                                                        />\r\n                                                    </Form.Item>\r\n                                                    <Button\r\n                                                        type=\"primary\"\r\n                                                        htmlType=\"submit\"\r\n                                                    >\r\n                                                        Update Name\r\n                                                </Button>\r\n                                                    <Link\r\n                                                        key={Math.random()}\r\n                                                        to={`/admin/${this.props.match.params.type}/course/${course._id}`}\r\n                                                    >\r\n                                                        <Button type=\"dashed\">\r\n                                                            Edit SubModule\r\n                                                    </Button>\r\n                                                    </Link>\r\n                                                </Form>\r\n                                                {/* <Divider /> */}\r\n                                            </>\r\n                                        ))}\r\n                                </ol>\r\n\r\n                                <Link\r\n                                    to={`/admin/${this.props.match.params.type}/add-course/${module._id}`}\r\n                                >\r\n                                    <Button\r\n                                        type=\"primary\"\r\n                                        htmlType=\"submit\"\r\n                                        style={{ margin: '2%' }}\r\n                                    >\r\n                                        + Add SubModule\r\n                                </Button>\r\n                                </Link>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            );\r\n        else return null;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    module: state.modulesReducer.currentModule,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getCurrentModule: bindActionCreators(getCurrentModule, dispatch),\r\n    updateModule: bindActionCreators(updateModule, dispatch),\r\n    updateSubModule: bindActionCreators(updateSubModule, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Module);\r\n","export const ACTION = {\r\n    ADD_COURSE_SUCCESS: 'ADD_COURSE_SUCCESS',\r\n    SET_COURSE_NAME: \"SET_COURSE_NAME\",\r\n    SET_COURSE_THUMBNAIL: \"SET_COURSE_THUMBNAIL\",\r\n    CLEAR_ADD_COURSE: \"CLEAR_ADD_COURSE\"\r\n};","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from '../../../config';\r\n\r\nexport const addCourse = (val) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/add`, val)\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_COURSE_SUCCESS,\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addCourse\")\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setCourseName = (name) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_COURSE_NAME,\r\n        payload: name\r\n    })\r\n}\r\n\r\nexport const setCourseThumbnail = (thumbnailPath) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_COURSE_THUMBNAIL,\r\n        payload: thumbnailPath\r\n    })\r\n}\r\n\r\nexport const clearAddCourse = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ADD_COURSE\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { setCourseName, setCourseThumbnail, clearAddCourse, addCourse } from './action';\r\nimport { Form, Input, Button, Upload } from 'antd';\r\nimport imageCompression from 'browser-image-compression';\r\nimport axios from 'axios'\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { baseUrl } from '../../../config';\r\n\r\n\r\nclass AddCourse extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"module id : \", this.props.match.params.module_id)\r\n    }\r\n\r\n    handleSubmit = async (val) => {\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        await this.props.addCourse(val)\r\n        this.setState({ loading: false })\r\n        // this.props.history.push(`/module/${this.props.match.params.module_id}`)\r\n        this.props.history.goBack()\r\n    }\r\n\r\n\r\n    render() {\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n        const { name, thumbnailPath, setCourseName, setCourseThumbnail } = this.props;\r\n        return (\r\n            <div className=\"add-module\" style={{ \"display\": \"flex\", \"flexDirection\": \"column\", justifyContent: \"center\" }}>\r\n                <h2>Add Sub Module</h2>\r\n                <Form onFinish={(val) => {\r\n                    const { name, thumbnailArray } = val;\r\n                    let thumbnail = thumbnailArray[0];\r\n                    if (thumbnail.response && thumbnail.response.location) {\r\n                        thumbnail = { name: thumbnail.name, response: thumbnail.response, status: thumbnail.status, thumbUrl: thumbnail.thumbUrl, uid: thumbnail.uid }\r\n                    }\r\n                    this.handleSubmit({\r\n                        name,\r\n                        thumbnailPath: thumbnail.response.location,\r\n                        thumbnailImage: thumbnail,\r\n                        module_id: this.props.match.params.module_id\r\n                    })\r\n                }}>\r\n                    <Form.Item label=\"Name\" name=\"name\" rules={[{ required: true }]} >\r\n                        <Input value={name} onChange={(e) => setCourseName(e.target.value)} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Thumbnail\"\r\n                        valuePropName=\"fileList\"\r\n                        name=\"thumbnailArray\"\r\n                        getValueFromEvent={normFile}\r\n                        rules={[{ required: true, message: 'Missing Image!' }]}\r\n                    >\r\n                        <Upload multiple={false} accept=\".png\"\r\n                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                const compressedFile = await imageCompression(file, options);\r\n                                console.log(\"before compeee\")\r\n                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                let formData = new FormData()\r\n                                formData.set('expId', '123')\r\n                                formData.append('file', compressedFile)\r\n\r\n                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                    onSuccess(res.data)\r\n                                    console.log(res.data)\r\n                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                            }}\r\n                            listType=\"picture\"\r\n                        >\r\n                            <Button>\r\n                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                        </Upload>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">ADD SUB-MODULE</Button >\r\n                    </Form.Item>\r\n                </Form>\r\n\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    name: state.addCourseReducer.name,\r\n    thumbnailPath: state.addCourseReducer.thumbnailPath\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setCourseName: bindActionCreators(setCourseName, dispatch),\r\n    setCourseThumbnail: bindActionCreators(setCourseThumbnail, dispatch),\r\n    clearAddCourse: bindActionCreators(clearAddCourse, dispatch),\r\n    addCourse: bindActionCreators(addCourse, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCourse)","import { ACTION } from './constants';\r\nimport axios from \"axios\"\r\nimport { baseUrl } from \"../../config\"\r\nexport const getCurrentCourse = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/get/${id}`);\r\n        // console.log(\"this is current course data\",res.data)\r\n        dispatch({\r\n            type: ACTION.GET_CURRENT_COURSE,\r\n            payload: res.data.course\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getCurrentCourse\")\r\n    }\r\n}\r\n\r\nexport const getParentModule = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/getp/${id}`);\r\n        dispatch({\r\n            type: ACTION.GET_CURRENT_PARENT,\r\n            payload: res.data.name\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getParentModule\")\r\n    }\r\n}\r\n//<<<<<<<<<<<<<<<INTRODUCTION>>>>>>>>>>>>>>>>>>>>\r\n\r\nexport const setIntroductionHtml = (html) => dispatch => {\r\n    dispatch({\r\n        type: ACTION.SET_INTRODUCTION_HTML,\r\n        payload: html\r\n    })\r\n}\r\n\r\nexport const getIntroduction = (id) => async dispatch => {//it is introduction id, not course id\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/introduction/get/${id}`);\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.GET_INTRODCUTION_HTML,\r\n            payload: res.data.introduction.html\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getIntroduction\")\r\n    }\r\n}\r\n\r\nexport const addIntroduction = (id, html, intro_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/introduction`, {\r\n            course_id: id,\r\n            html: html,\r\n            introduction_id: intro_id\r\n        })\r\n        dispatch({\r\n            type: ACTION.ADD_INTRODUCTION_SUCCESS\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log(\"error in addIntroduction\")\r\n    }\r\n}\r\n\r\nexport const clearIntroduction = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_INTRODUCTION\r\n    })\r\n}\r\n\r\n//<<<<<<<<<<<<BUILD_CIRCUIT>>>>>>>>>>>\r\n\r\nexport const getBuildCircuit = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/buildCircuit/get/${id}`)\r\n        console.log(\"asking fro get build ckt\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_BUILD_CIRCUIT,\r\n            payload: res.data.buildCircuit\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getBuildCircuit\")\r\n    }\r\n}\r\n\r\nexport const addBuildCircuit = (id, steps, code, codeStepStart, build_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/buildCircuit`, {\r\n            course_id: id,\r\n            steps,\r\n            code,\r\n            codeStepStart,\r\n            build_id: build_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_BUILD_CIRCUIT_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addBuildCircuit\")\r\n    }\r\n}\r\n\r\nexport const clearBuildCircuit = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_BUILD_CIRCUIT\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n//<<<<<<<<<<<<EXPERIMENT>>>>>>>>>>>\r\n\r\nexport const getExperiment = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/experiment/get/${id}`)\r\n        console.log(\"asking fro get experiment\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_EXPERIMENT,\r\n            payload: res.data.experiment\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getExperiment\")\r\n    }\r\n}\r\n\r\nexport const addExperiment = (id, steps, simulationLink, finalMessage, exp_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/experiment`, {\r\n            course_id: id,\r\n            steps,\r\n            simulationLink,\r\n            finalMessage,\r\n            exp_id: exp_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_EXPERIMENT_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addExperiment\")\r\n    }\r\n}\r\n\r\nexport const clearExperiment = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_EXPERIMENT\r\n    })\r\n}\r\n\r\n\r\n//<<<<<<<<<<<EXPERIMENT_FORM>>>>>>>>>>>>>\r\n\r\n\r\nexport const addExperimentForm = (id, formContent, exp_id) => async dispatch => {\r\n    try {\r\n        console.log(\"herrrrrrrrrrrrrrrrrrrr\")\r\n        const res = await axios.post(`${baseUrl}/api/course/experimentForm`, {\r\n            course_id: id,\r\n            formContent,\r\n            exp_id: exp_id\r\n        })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_EXPERIMENT_FORM_SUCCESS\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log(\"error in addExperimentForm\")\r\n    }\r\n}\r\n\r\n\r\n\r\n//<<<<<<<<<<<RESULTS>>>>>>>>>>>>>\r\n\r\n\r\nexport const addResults = (id, formContent, results_id) => async dispatch => {\r\n    try {\r\n        console.log(\"herrrrrrrrrrrrrrrrrrrr\")\r\n        const res = await axios.post(`${baseUrl}/api/course/results`, {\r\n            course_id: id,\r\n            formContent,\r\n            results_id\r\n        })\r\n        console.log(res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_RESULTS_SUCCESS\r\n        })\r\n\r\n    } catch (err) {\r\n        console.log(\"error in addResults\")\r\n    }\r\n}\r\n\r\n\r\n//<<<<<<<<<<<<TROUBLESHOOT>>>>>>>>>>>\r\n\r\nexport const getTroubleshoot = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/troubleshoot/get/${id}`)\r\n        console.log(\"asking for get troubleshoot\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_TROUBLESHOOT,\r\n            payload: res.data.troubleshoot\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getTroubleshoot\")\r\n    }\r\n}\r\n\r\nexport const addTroubleshoot = (id, faqs, troubleshoot_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/troubleshoot`, {\r\n            course_id: id,\r\n            faqs: faqs,\r\n            troubleshoot_id: troubleshoot_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_TROUBLESHOOT_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addTroubleshoot\")\r\n    }\r\n}\r\n\r\nexport const clearTroubleshoot = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_TROUBLESHOOT\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//<<<<<<<<<<<<EXCERCISE>>>>>>>>>>>\r\n\r\nexport const getExcercise = (id) => async dispatch => {\r\n    try {\r\n        const res = await axios.get(`${baseUrl}/api/course/excercise/get/${id}`)\r\n        console.log(\"asking for get excercise\", res.data)\r\n\r\n        dispatch({\r\n            type: ACTION.GET_EXCERCISE,\r\n            payload: res.data.excercise\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in getExcercise\")\r\n    }\r\n}\r\n\r\nexport const addExcercise = (id, excercise_list, excerciseFiles, excerciseFilePaths, excercise_id) => async dispatch => {\r\n    try {\r\n        const res = await axios.post(`${baseUrl}/api/course/excercise`, {\r\n            course_id: id,\r\n            excercise_list: excercise_list,\r\n            excerciseFiles,\r\n            excerciseFilePaths,\r\n            excercise_id: excercise_id\r\n        })\r\n        console.log(\"after adding resp\", res.data)\r\n        dispatch({\r\n            type: ACTION.ADD_EXCERCISE_SUCCESS\r\n        })\r\n    } catch (err) {\r\n        console.log(\"error in addExcercise\")\r\n    }\r\n}\r\n\r\nexport const clearExcercise = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_EXCERCISE\r\n    })\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { getCurrentCourse, getParentModule } from './action';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\nimport { SUBMODULE, GETTINGSTARTED } from '../../config';\r\nimport './styles.scss';\r\n\r\nclass Course extends Component {\r\n    componentDidMount() {\r\n        // console.log(this.props.match.params.id);\r\n        this.props.getCurrentCourse(this.props.match.params.id);\r\n        this.props.getParentModule(this.props.match.params.id);\r\n    }\r\n    render() {\r\n        const { course, parent } = this.props;\r\n        return (\r\n            <div className=\"submod-divs-container\">\r\n                <h2>\r\n                    {' '}\r\n                    {SUBMODULE.toUpperCase()} : {course.name}\r\n                </h2>\r\n\r\n                <br />\r\n                {parent !== GETTINGSTARTED && (\r\n                    <div className=\"divslist\">\r\n                        <Button className=\"button-divs\">\r\n                            <Link\r\n                                to={`/admin/${this.props.match.params.type}/course/introduction/${this.props.match.params.id}`}\r\n                            >\r\n                                INTRODUCTION\r\n                            </Link>\r\n                        </Button>\r\n                        <Button className=\"button-divs\">\r\n                            <Link\r\n                                to={`/admin/${this.props.match.params.type}/course/build-circuit/${this.props.match.params.id}`}\r\n                            >\r\n                                BUILD CIRCUIT\r\n                            </Link>\r\n                        </Button>\r\n                        <Button className=\"button-divs\">\r\n                            <Link\r\n                                to={`/admin/${this.props.match.params.type}/course/experiment/${this.props.match.params.id}`}\r\n                            >\r\n                                EXPERIMENT\r\n                            </Link>\r\n                        </Button>\r\n                        {course.experiment &&\r\n                            this.props.match.params.type === 'digital' ? (\r\n                                <Button className=\"button-divs\">\r\n                                    <Link\r\n                                        to={`/admin/${this.props.match.params.type}/course/experiment-form/${this.props.match.params.id}/${course.experiment}`}\r\n                                    >\r\n                                        EXPERIMENT FORM\r\n                                </Link>\r\n                                </Button>\r\n                            ) : null}\r\n                        <Button className=\"button-divs\">\r\n                            <Link\r\n                                to={`/admin/${this.props.match.params.type}/course/troubleshoot/${this.props.match.params.id}`}\r\n                            >\r\n                                TROUBLESHOOT\r\n                            </Link>\r\n                        </Button>\r\n                        <Button className=\"button-divs\">\r\n                            <Link\r\n                                to={`/admin/${this.props.match.params.type}/course/results/${this.props.match.params.id}`}\r\n                            >\r\n                                RESULTS AND ANALYSIS\r\n                            </Link>\r\n                        </Button>\r\n                        <Button className=\"button-divs\">\r\n                            <Link\r\n                                to={`/admin/${this.props.match.params.type}/course/excercise/${this.props.match.params.id}`}\r\n                            >\r\n                                EXCERCISE\r\n                            </Link>\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n                {parent === GETTINGSTARTED && (\r\n                    <>\r\n                        <Button>\r\n                            <Link\r\n                                to={{\r\n                                    pathname: `/admin/${this.props.match.params.type}/course/experiment/${this.props.match.params.id}`,\r\n                                    state: { gettingStarted: true },\r\n                                }}\r\n                            >\r\n                                ADD INFOGRAPHICS\r\n                            </Link>\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    course: state.courseReducer.currentCourse,\r\n    parent: state.courseReducer.currentParent,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getCurrentCourse: bindActionCreators(getCurrentCourse, dispatch),\r\n    getParentModule: bindActionCreators(getParentModule, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Course);\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor'\r\nimport { bindActionCreators } from 'redux'\r\nimport { setIntroductionHtml, addIntroduction, getIntroduction, clearIntroduction } from '../action'\r\nimport { Form, Button, notification } from 'antd'\r\n\r\nclass AddIntroduction extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n    handleSubmit = async () => {\r\n        const { introductionHtml, addIntroduction, clearIntroduction, currentCourse } = this.props;\r\n        if (introductionHtml) {\r\n            this.setState({ loading: true })\r\n            await addIntroduction(this.props.match.params.id, introductionHtml, currentCourse.introduction)\r\n            this.setState({ loading: false })\r\n            clearIntroduction()\r\n            // this.props.history.push(`/course/${this.props.match.params.id}`)\r\n            this.props.history.goBack();\r\n        } else {\r\n            this.openNotificationWithIcon('warning', 'Please fill all the fields')\r\n        }\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.introduction) {\r\n            console.log(\"has introduction, gotta call server\")\r\n            this.props.getIntroduction(this.props.currentCourse.introduction)\r\n        } else {\r\n            console.log(\"does not ahve any introduction astart from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //????\r\n        this.props.clearIntroduction();\r\n    }\r\n\r\n    render() {\r\n        const { introductionHtml, setIntroductionHtml } = this.props;\r\n        return (\r\n            <div style={{ border: \"2px solid black\", margin: \"2%\", padding: \"2%\" }}>\r\n\r\n                <h2>{this.props.currentCourse.name.toUpperCase()} : Introduction</h2>\r\n                <div classname=\"add-module\" style={{ \"display\": \"flex\", \"flexDirection\": \"column\", justifyContent: \"center\" }}>\r\n                    <Form.Item label=\"Introduction\">\r\n                        <TextEditor content={introductionHtml} handleEditorChange={setIntroductionHtml}></TextEditor>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button loading={this.state.loading} onClick={this.handleSubmit} type=\"primary\" htmlType=\"submit\">ADD/UPDATE INTRODUCTION</Button>\r\n                    </Form.Item>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    introductionHtml: state.courseReducer.introductionHtml\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setIntroductionHtml: bindActionCreators(setIntroductionHtml, dispatch),\r\n    addIntroduction: bindActionCreators(addIntroduction, dispatch),\r\n    getIntroduction: bindActionCreators(getIntroduction, dispatch),\r\n    clearIntroduction: bindActionCreators(clearIntroduction, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddIntroduction)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux';\r\nimport { addExperiment, clearExperiment, getExperiment } from '../action';\r\nimport axios from \"axios\"\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nimport { Form, Input, Button, notification, Upload } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { baseUrl } from '../../../config';\r\n\r\nclass AddExperiment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.experiment) {\r\n            console.log(\"has experiment, gotta call server\")\r\n            this.props.getExperiment(this.props.currentCourse.experiment)\r\n        } else {\r\n            console.log(\"does not have any experiment start from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearExperiment()\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        console.log(this.props.location.state?.gettingStarted)\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n\r\n        if (this.props.currentCourse.experiment && this.props.experiment) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Experiment</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.experiment} onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, simulationLink, finalMessage } = val;\r\n                        let success = 1;\r\n                        if (steps.length) {\r\n\r\n                            let newSteps;\r\n\r\n                            if (this.props.match.params.type === \"arduino\") {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, description } = step;\r\n                                    if (upload_image && upload_image[0].response && upload_image[0].response.location) {\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n\r\n                                    }\r\n                                    else {\r\n                                        success = 0;\r\n                                    }\r\n                                })\r\n                            } else if (this.props.location.state?.gettingStarted) {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, description, simulationLink } = step;\r\n                                    if (simulationLink) {\r\n                                        return {\r\n                                            description,\r\n                                            simulationLink\r\n                                        }\r\n                                    }\r\n                                    else if (upload_image && upload_image.length && upload_image[0].response && upload_image[0].response.location) {\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid,\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        success = 0\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                newSteps = steps;\r\n                            }\r\n\r\n\r\n\r\n                            if (success) {\r\n\r\n                                this.setState({ loading: true })\r\n                                await this.props.addExperiment(this.props.match.params.id, newSteps, simulationLink, finalMessage, this.props.currentCourse.experiment)\r\n                                this.setState({ loading: false })\r\n                                console.log(\"aboutt to cler\")\r\n                                this.props.clearExperiment()\r\n                                console.log(\"about to go back\")\r\n                                this.props.history.goBack()\r\n                            } else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n                            }\r\n\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n                        }\r\n                    }\r\n                    }>\r\n\r\n                        {/*FOR DIGITAL*/}\r\n\r\n                        {this.props.match.params.type === \"digital\" && !this.props.location.state?.gettingStarted ?\r\n                            <Form.Item name=\"simulationLink\" label=\"Simulation Link\" rules={[{ required: true }]}>\r\n                                <Input />\r\n                            </Form.Item>\r\n                            : null}\r\n\r\n\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n\r\n                                                    {this.props.match.params.type === \"digital\" && this.props.location.state?.gettingStarted ?\r\n                                                        <>\r\n                                                            <Form.Item\r\n                                                                label={`Simulation Link${index + 1}`}\r\n                                                                {...field}\r\n                                                                key={\"sim-link\" + index}\r\n                                                                name={[field.name, 'simulationLink']}\r\n                                                            >\r\n                                                                <Input autosize={{ minRows: 1 }} />\r\n                                                            </Form.Item>\r\n                                                            <span style={{ textAlign: \"center\" }}>OR</span>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                key={\"upload_image\" + index}\r\n                                                                // {...formItemLayoutWithOutLabel}\r\n                                                                name={[field.name, 'upload_image']}\r\n                                                                valuePropName=\"fileList\"\r\n                                                                getValueFromEvent={normFile}\r\n                                                                fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                            >\r\n                                                                <Upload multiple={false} accept=\".png\"\r\n                                                                    name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                        const compressedFile = await imageCompression(file, options);\r\n                                                                        console.log(\"before compeee\")\r\n                                                                        console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                        console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                        console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                        console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                        let formData = new FormData()\r\n                                                                        formData.set('expId', '123')\r\n\r\n                                                                        formData.append('file', compressedFile)\r\n                                                                        await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                            onSuccess(res.data)\r\n                                                                            console.log(res.data)\r\n                                                                        }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                    }}\r\n                                                                    listType=\"picture\"\r\n                                                                >\r\n                                                                    <Button>\r\n                                                                        <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                                </Upload>\r\n                                                            </Form.Item>\r\n\r\n\r\n                                                        </> : null}\r\n\r\n                                                    {this.props.match.params.type === \"arduino\" ? <Form.Item\r\n                                                        {...field}\r\n                                                        key={\"upload_image\" + index}\r\n                                                        {...formItemLayoutWithOutLabel}\r\n                                                        name={[field.name, 'upload_image']}\r\n                                                        valuePropName=\"fileList\"\r\n                                                        getValueFromEvent={normFile}\r\n                                                        fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                        rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                    >\r\n                                                        <Upload multiple={false} accept=\".png\"\r\n                                                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                const compressedFile = await imageCompression(file, options);\r\n                                                                console.log(\"before compeee\")\r\n                                                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                let formData = new FormData()\r\n                                                                formData.set('expId', '123')\r\n\r\n                                                                formData.append('file', compressedFile)\r\n                                                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                    onSuccess(res.data)\r\n                                                                    console.log(res.data)\r\n                                                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                            }}\r\n                                                            listType=\"picture\"\r\n                                                        >\r\n                                                            <Button>\r\n                                                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item> : null}\r\n\r\n\r\n\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        {this.props.match.params.type === \"digital\" && !this.props.location.state?.gettingStarted ? <Form.Item initialValue=\"Hello this is default\" label=\"Final message\" name=\"finalMessage\" rules={[{ required: true }]}>\r\n                            <Input.TextArea autoSize={{ minRows: 2 }} />\r\n                        </Form.Item> : null}\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else if (!this.props.currentCourse.experiment) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Experiment</h2>\r\n\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, simulationLink, finalMessage } = val;\r\n                        let success = 1;\r\n                        if (steps.length) {\r\n\r\n                            let newSteps;\r\n\r\n                            if (this.props.match.params.type === \"arduino\") {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, description } = step;\r\n                                    if (upload_image[0].response && upload_image[0].response.location) {\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n\r\n                                    }\r\n                                    else {\r\n                                        success = 0;\r\n                                    }\r\n                                })\r\n                            }\r\n                            else if (this.props.location.state?.gettingStarted) {\r\n                                newSteps = steps.map(step => {\r\n                                    const { upload_image, description, simulationLink } = step;\r\n                                    if (simulationLink) {\r\n                                        return {\r\n                                            description,\r\n                                            simulationLink\r\n                                        }\r\n                                    }\r\n                                    else if (upload_image && upload_image.length && upload_image[0].response && upload_image[0].response.location) {\r\n                                        return {\r\n                                            description,\r\n                                            upload_image: [{\r\n                                                name: upload_image[0].name,\r\n                                                response: upload_image[0].response,\r\n                                                status: upload_image[0].status,\r\n                                                thumbUrl: upload_image[0].thumbUrl,\r\n                                                uid: upload_image[0].uid,\r\n                                            }],\r\n                                            imagePath: upload_image[0].response.location\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        success = 0\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                newSteps = steps;\r\n                            }\r\n\r\n                            if (success) {\r\n\r\n                                this.setState({ loading: true })\r\n                                await this.props.addExperiment(this.props.match.params.id, newSteps, simulationLink, finalMessage, this.props.currentCourse.experiment)\r\n                                this.setState({ loading: false })\r\n                                console.log(\"abt to cler\")\r\n                                this.props.clearExperiment()\r\n                                console.log(\"abt to go back\")\r\n                                this.props.history.goBack()\r\n\r\n                            }\r\n                            else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n                        {/*FOR DIGITAL*/}\r\n\r\n                        {this.props.match.params.type === \"digital\" && !this.props.location.state?.gettingStarted ?\r\n                            <Form.Item name=\"simulationLink\" label=\"Simulation Link\" rules={[{ required: true }]}>\r\n                                <Input />\r\n                            </Form.Item>\r\n                            : null}\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n\r\n                                                    {this.props.match.params.type === \"digital\" && this.props.location.state?.gettingStarted ?\r\n                                                        <>\r\n                                                            <Form.Item\r\n                                                                label={`Simulation Link${index + 1}`}\r\n                                                                {...field}\r\n                                                                key={\"sim-link\" + index}\r\n                                                                name={[field.name, 'simulationLink']}\r\n                                                            >\r\n                                                                <Input autosize={{ minRows: 1 }} />\r\n                                                            </Form.Item>\r\n                                                            <span style={{ textAlign: \"center\" }}>OR</span>\r\n                                                            <Form.Item\r\n                                                                {...field}\r\n                                                                key={\"upload_image\" + index}\r\n                                                                // {...formItemLayoutWithOutLabel}\r\n                                                                name={[field.name, 'upload_image']}\r\n                                                                valuePropName=\"fileList\"\r\n                                                                getValueFromEvent={normFile}\r\n                                                                fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                            >\r\n                                                                <Upload multiple={false} accept=\".png\"\r\n                                                                    name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                        const compressedFile = await imageCompression(file, options);\r\n                                                                        console.log(\"before compeee\")\r\n                                                                        console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                        console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                        console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                        console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                        let formData = new FormData()\r\n                                                                        formData.set('expId', '123')\r\n\r\n                                                                        formData.append('file', compressedFile)\r\n                                                                        await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                            onSuccess(res.data)\r\n                                                                            console.log(res.data)\r\n                                                                        }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                    }}\r\n                                                                    listType=\"picture\"\r\n                                                                >\r\n                                                                    <Button>\r\n                                                                        <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                                </Upload>\r\n                                                            </Form.Item>\r\n\r\n\r\n                                                        </> : null}\r\n\r\n\r\n\r\n\r\n                                                    {this.props.match.params.type === \"arduino\" ? <Form.Item\r\n                                                        {...field}\r\n                                                        key={\"upload_image\" + index}\r\n                                                        {...formItemLayoutWithOutLabel}\r\n                                                        name={[field.name, 'upload_image']}\r\n                                                        valuePropName=\"fileList\"\r\n                                                        getValueFromEvent={normFile}\r\n                                                        fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                        rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                    >\r\n                                                        <Upload multiple={false} accept=\".png\"\r\n                                                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                const compressedFile = await imageCompression(file, options);\r\n                                                                console.log(\"before compeee\")\r\n                                                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                let formData = new FormData()\r\n                                                                formData.set('expId', '123')\r\n\r\n                                                                formData.append('file', compressedFile)\r\n                                                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                    onSuccess(res.data)\r\n                                                                    console.log(res.data)\r\n                                                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                            }}\r\n                                                            listType=\"picture\"\r\n                                                        >\r\n                                                            <Button>\r\n                                                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item> : null}\r\n\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        {this.props.match.params.type === \"digital\" && !this.props.location.state?.gettingStarted ? <Form.Item initialValue=\"Hello this is default\" label=\"Final message\" name=\"finalMessage\" rules={[{ required: true }]}>\r\n                            <Input.TextArea autoSize={{ minRows: 2 }} />\r\n                        </Form.Item> : null}\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    experiment: state.courseReducer.experiment\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addExperiment: bindActionCreators(addExperiment, dispatch),\r\n    clearExperiment: bindActionCreators(clearExperiment, dispatch),\r\n    getExperiment: bindActionCreators(getExperiment, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExperiment)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { addTroubleshoot, clearTroubleshoot, getTroubleshoot } from '../action'\r\n\r\nimport { Form, Input, Button, notification } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, } from '@ant-design/icons';\r\nimport TextEditor from '../../TextEditor/text';\r\n\r\nclass AddTroubleshoot extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.troubleshoot) {\r\n            console.log(\"has troubleshoot, gotta call server\")\r\n            this.props.getTroubleshoot(this.props.currentCourse.troubleshoot)\r\n        } else {\r\n            console.log(\"does not have any troubleshoot start from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearTroubleshoot()\r\n    }\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n    render() {\r\n\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        if (this.props.currentCourse.troubleshoot && this.props.troubleshoot) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            console.log(\"vasss\", this.props.troubleshoot)\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Troubleshoot</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.troubleshoot} onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { faqs } = val;\r\n                        if (faqs.length) {\r\n\r\n                            this.setState({ loading: true })\r\n                            await this.props.addTroubleshoot(this.props.match.params.id, faqs, this.props.currentCourse.troubleshoot)\r\n                            this.setState({ loading: false })\r\n                            console.log(\"aboutt to clear\")\r\n                            this.props.clearTroubleshoot()\r\n                            console.log(\"about to go back\")\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one FAQ is there')\r\n                        }\r\n\r\n                    }}>\r\n\r\n                        <Form.List name=\"faqs\" label=\"faqs\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                    // rules={[{ required: true, message: 'Missing Step Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Answer${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'answer']}\r\n                                                        fieldKey={[field.fieldKey, 'answer']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n                                                    >\r\n                                                        <TextEditor />\r\n\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else if (!this.props.currentCourse.troubleshoot) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Troubleshoot</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { faqs } = val;\r\n\r\n                        if (faqs.length) {\r\n                            this.setState({ loading: true })\r\n                            await this.props.addTroubleshoot(this.props.match.params.id, faqs, this.props.currentCourse.troubleshoot)\r\n                            this.setState({ loading: false })\r\n                            console.log(\"abt to cler\")\r\n                            this.props.clearTroubleshoot()\r\n                            console.log(\"abt to go back\")\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n                        <Form.List name=\"faqs\" label=\"faqs\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                    // rules={[{ required: true, message: 'Missing Step Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Answer${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'answer']}\r\n                                                        fieldKey={[field.fieldKey, 'answer']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Answer' }]}\r\n\r\n                                                    >\r\n                                                        <TextEditor />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            console.log(\"ddd\")\r\n            return null;\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    troubleshoot: state.courseReducer.troubleshoot\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTroubleshoot: bindActionCreators(addTroubleshoot, dispatch),\r\n    clearTroubleshoot: bindActionCreators(clearTroubleshoot, dispatch),\r\n    getTroubleshoot: bindActionCreators(getTroubleshoot, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTroubleshoot)\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Form, Input, Button, Upload, notification, InputNumber } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport axios from \"axios\"\r\nimport imageCompression from 'browser-image-compression';\r\nimport { bindActionCreators } from 'redux';\r\nimport { addBuildCircuit, clearBuildCircuit, getBuildCircuit } from '../action';\r\nimport { baseUrl } from '../../../config';\r\n\r\nclass AddBuildCircuit extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        if (this.props.currentCourse.buildCircuit) {\r\n            console.log(\"has buildcircuit, gotta call server\")\r\n            await this.props.getBuildCircuit(this.props.currentCourse.buildCircuit)\r\n        } else {\r\n            console.log(\"does not ahve any buildckt astart from the first\")\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(pres, next) {\r\n        console.log(\"pres\", pres)\r\n        console.log(\"next\", next)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"unmounting addBuildCircuit\")\r\n        this.props.clearBuildCircuit();\r\n    }\r\n\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n        console.log(\"render of add build\", this.props.buildCircuit)\r\n\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            if (e.fileList.length > 1) {\r\n                e.fileList.shift();\r\n            }\r\n            console.log(\"called\")\r\n            return e && e.fileList;\r\n        };\r\n        if (this.props.currentCourse.buildCircuit && this.props.buildCircuit) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Build Circuit</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.buildCircuit} onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, code, codeStepStart } = val;\r\n                        let success = 1;\r\n                        if (steps?.length) {\r\n                            let newSteps = steps.map(step => {\r\n                                const { upload_image, upload_side, description } = step;\r\n                                if (upload_side && upload_side.length && upload_image[0].response && upload_image[0].response.location && upload_side[0].response && upload_side[0].response.location)\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                        upload_side: [{\r\n                                            name: upload_side[0].name,\r\n                                            // originalFileObj: upload_side[0].originalFileObj,\r\n                                            response: upload_side[0].response,\r\n                                            status: upload_side[0].status,\r\n                                            thumbUrl: upload_side[0].thumbUrl,\r\n                                            uid: upload_side[0].uid\r\n                                        }],\r\n                                        sideImagePath: upload_image[0].response.location\r\n                                    }\r\n                                else if (upload_image[0].response && upload_image[0].response.location) {\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    success = 0;\r\n                                }\r\n                            }\r\n                            )\r\n                            if (success) {\r\n                                this.setState({ ans: { steps: newSteps } });\r\n                                console.log({ steps: newSteps })\r\n                                // axios.post('http://localhost:3300/course/buildCircuit', { course_id: \"5f1ef04ec0f8f301d4f0668f\", steps: newSteps })\r\n                                //     .then(res => console.log(\"hmm seems fine\"))\r\n                                //     .catch(err => console.log(\"error in adding\"))\r\n                                this.setState({ loading: true })\r\n                                await this.props.addBuildCircuit(this.props.match.params.id, newSteps, code, codeStepStart, this.props.currentCourse.buildCircuit)\r\n                                this.setState({ loading: false })\r\n                                console.log(\"abt to cler\")\r\n                                this.props.clearBuildCircuit()\r\n                                console.log(\"abt to go back\")\r\n                                this.props.history.goBack()\r\n                            }\r\n                            else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n\r\n                            }\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n                        {/*FOR ARDUINO*/}\r\n\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code\" name=\"code\"\r\n                            rules={[{ required: true, message: 'Missing Code' }]}\r\n                        >\r\n                            <Input.TextArea autoSize={{ minRows: 5 }} />\r\n                        </Form.Item> : null}\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code starting step\" name=\"codeStepStart\" rules={[{ required: true }]}>\r\n                            <InputNumber />\r\n                        </Form.Item> : null}\r\n\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        {...field}\r\n                                                        key={\"upload_image\" + index}\r\n                                                        {...formItemLayoutWithOutLabel}\r\n                                                        name={[field.name, 'upload_image']}\r\n                                                        valuePropName=\"fileList\"\r\n                                                        getValueFromEvent={normFile}\r\n                                                        fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                        rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                    >\r\n                                                        <Upload multiple={false} accept=\".png\"\r\n                                                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                const compressedFile = await imageCompression(file, options);\r\n                                                                console.log(\"before compeee\")\r\n                                                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                let formData = new FormData()\r\n                                                                formData.set('expId', '123')\r\n                                                                formData.append('file', compressedFile)\r\n                                                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                    onSuccess(res.data)\r\n                                                                    console.log(res.data)\r\n                                                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                            }}\r\n                                                            listType=\"picture\"\r\n                                                        >\r\n                                                            <Button>\r\n                                                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item>\r\n\r\n                                                    {this.props.match.params.type === \"digital\" ? (\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            key={\"upload_side\" + index}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_side']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\".png\"\r\n                                                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                    const compressedFile = await imageCompression(file, options);\r\n                                                                    console.log(\"before compeee\")\r\n                                                                    console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                    console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                    console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                    console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                    let formData = new FormData()\r\n                                                                    formData.set('expId', '123')\r\n                                                                    formData.append('file', compressedFile)\r\n\r\n                                                                    await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                        onSuccess(res.data)\r\n                                                                        console.log(res.data)\r\n                                                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                }}\r\n                                                                listType=\"picture\"\r\n                                                            >\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Side Image (if any)\r\n                                                        </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                    ) : null}\r\n\r\n\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        }\r\n        else if (!this.props.currentCourse.buildCircuit) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Build Circuit</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { steps, code, codeStepStart } = val;\r\n                        let success = 1;\r\n                        if (steps?.length) {\r\n                            let newSteps = steps.map(step => {\r\n                                const { upload_image, upload_side, description } = step;\r\n                                if (upload_side && upload_side.length && upload_image[0].response && upload_image[0].response.location && upload_side[0].response && upload_side[0].response.location)\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                        upload_side: [{\r\n                                            name: upload_side[0].name,\r\n                                            // originalFileObj: upload_side[0].originalFileObj,\r\n                                            response: upload_side[0].response,\r\n                                            status: upload_side[0].status,\r\n                                            thumbUrl: upload_side[0].thumbUrl,\r\n                                            uid: upload_side[0].uid\r\n                                        }],\r\n                                        sideImagePath: upload_image[0].response.location\r\n                                    }\r\n                                else if (upload_image[0].response && upload_image[0].response.location) {\r\n                                    return {\r\n                                        description,\r\n                                        upload_image: [{\r\n                                            name: upload_image[0].name,\r\n                                            // originalFileObj: upload_image[0].originalFileObj,\r\n                                            response: upload_image[0].response,\r\n                                            status: upload_image[0].status,\r\n                                            thumbUrl: upload_image[0].thumbUrl,\r\n                                            uid: upload_image[0].uid\r\n                                        }],\r\n                                        imagePath: upload_image[0].response.location,\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    success = 0;\r\n                                }\r\n                            }\r\n                            )\r\n                            if (success) {\r\n                                this.setState({ ans: { steps: newSteps } });\r\n                                console.log({ steps: newSteps })\r\n                                // axios.post('http://localhost:3300/course/buildCircuit', { course_id: \"5f1ef04ec0f8f301d4f0668f\", steps: newSteps })\r\n                                //     .then(res => console.log(\"hmm seems fine\"))\r\n                                //     .catch(err => console.log(\"error in adding\"))\r\n                                this.setState({ loading: true })\r\n                                await this.props.addBuildCircuit(this.props.match.params.id, newSteps, code, codeStepStart, this.props.currentCourse.buildCircuit)\r\n                                this.setState({ loading: false })\r\n                                console.log(\"abt to cler\")\r\n                                this.props.clearBuildCircuit()\r\n                                console.log(\"abt to go back\")\r\n                                this.props.history.goBack()\r\n                            }\r\n                            else {\r\n                                this.openNotificationWithIcon('error', 'Please make sure all the images have been successfully uploaded')\r\n\r\n                            }\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n\r\n                        {/*FOR ARDUINO*/}\r\n\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code\" name=\"code\"\r\n                            rules={[{ required: true, message: 'Missing Code' }]}\r\n                        >\r\n                            <Input.TextArea autoSize={{ minRows: 5 }} />\r\n                        </Form.Item> : null}\r\n\r\n                        {this.props.match.params.type === \"arduino\" ? <Form.Item label=\"Code starting step\" name=\"codeStepStart\" rules={[{ required: true }]}>\r\n                            <InputNumber />\r\n                        </Form.Item> : null}\r\n\r\n\r\n\r\n\r\n\r\n                        <Form.List name=\"steps\" label=\"steps\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Step${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'description']}\r\n                                                        fieldKey={[field.fieldKey, 'description']}\r\n                                                        rules={[{ required: true, message: 'Missing Step Description' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        {...field}\r\n                                                        key={\"upload_image\" + index}\r\n                                                        {...formItemLayoutWithOutLabel}\r\n                                                        name={[field.name, 'upload_image']}\r\n                                                        valuePropName=\"fileList\"\r\n                                                        getValueFromEvent={normFile}\r\n                                                        fieldKey={[field.fieldKey, 'upload_image']}\r\n                                                        rules={[{ required: true, message: 'Missing Image!' }]}\r\n                                                    >\r\n                                                        <Upload multiple={false} accept=\".png\"\r\n                                                            name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                const compressedFile = await imageCompression(file, options);\r\n                                                                console.log(\"before compeee\")\r\n                                                                console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                let formData = new FormData()\r\n                                                                formData.set('expId', '123')\r\n                                                                formData.append('file', compressedFile)\r\n                                                                await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                    onSuccess(res.data)\r\n                                                                    console.log(res.data)\r\n                                                                }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                            }}\r\n                                                            listType=\"picture\"\r\n                                                        >\r\n                                                            <Button>\r\n                                                                <UploadOutlined /> Upload Image\r\n                                                        </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item>\r\n                                                    {this.props.match.params.type === \"digital\" ? (\r\n                                                        <Form.Item\r\n                                                            {...field}\r\n                                                            key={\"upload_side\" + index}\r\n                                                            {...formItemLayoutWithOutLabel}\r\n                                                            name={[field.name, 'upload_side']}\r\n                                                            valuePropName=\"fileList\"\r\n                                                            getValueFromEvent={normFile}\r\n                                                            fieldKey={[field.fieldKey, 'upload_side']}\r\n                                                        >\r\n                                                            <Upload multiple={false} accept=\".png\"\r\n                                                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                                                    const compressedFile = await imageCompression(file, options);\r\n                                                                    console.log(\"before compeee\")\r\n                                                                    console.log('originalFile instanceof Blob', file instanceof Blob); // true\r\n                                                                    console.log(`originalFile size ${file.size / 1024 / 1024} MB`);\r\n                                                                    console.log('compressedFile instanceof Blob', compressedFile instanceof Blob); // true\r\n                                                                    console.log(`compressedFile size ${compressedFile.size / 1024 / 1024} MB`);\r\n                                                                    let formData = new FormData()\r\n                                                                    formData.set('expId', '123')\r\n                                                                    formData.append('file', compressedFile)\r\n                                                                    await axios.post(`${baseUrl}/api/upload/experiment`, formData).then(res => {\r\n                                                                        onSuccess(res.data)\r\n                                                                        console.log(res.data)\r\n                                                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                                                }}\r\n                                                                listType=\"picture\"\r\n                                                            >\r\n                                                                <Button>\r\n                                                                    <UploadOutlined /> Upload Side Image (if any)\r\n                                                        </Button>\r\n                                                            </Upload>\r\n                                                        </Form.Item>\r\n                                                    ) : null}\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                        <p>***Update only if any changes are made, otherwise it may take time***</p>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    buildCircuit: state.courseReducer.buildCircuit\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addBuildCircuit: bindActionCreators(addBuildCircuit, dispatch),\r\n    clearBuildCircuit: bindActionCreators(clearBuildCircuit, dispatch),\r\n    getBuildCircuit: bindActionCreators(getBuildCircuit, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddBuildCircuit)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor'\r\nimport { bindActionCreators } from 'redux'\r\nimport axios from 'axios'\r\nimport { uuid } from 'uuidv4'\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    notification,\r\n    Switch,\r\n    Upload\r\n} from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { addExperimentForm } from '../action'\r\nimport { baseUrl } from '../../../config'\r\n\r\nclass AddExperimentForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            inputModal: false,\r\n            textareaModal: false,\r\n            numberModal: false,\r\n            checkboxModal: false,\r\n            radioModal: false,\r\n            switchModal: false,\r\n            checkboxgroupModal: false,\r\n            headingModal: false,\r\n            textModal: false,\r\n            tableModal: false,\r\n            uploadModal: false,\r\n            tempTable: [],\r\n            tempValue: '',\r\n\r\n            questions: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.currentCourse) {\r\n            console.log(\"has , gotta call server\")\r\n            // this.props.getExperimentForm(this.props.currentCourse.experiment)\r\n            axios.get(`${baseUrl}/api/course/experimentForm/get/${this.props.match.params.expId}`)\r\n                .then(res => res.data)\r\n                .then(expForm => {\r\n                    if (expForm.form) {\r\n                        this.setState({ questions: expForm.form.formContent })\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"error in getting exp form\"))\r\n        } else {\r\n            console.log(\"does not ahve any introduction astart from the first\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n    handleAddInput = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"input\", required: required ? true : false, name: label, label: label }],\r\n                inputModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddTextarea = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"textarea\", required: required ? true : false, name: label, label: label }],\r\n                textareaModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddNumber = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"number\", required: required ? true : false, name: label, label: label }],\r\n                numberModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckbox = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"checkbox\", name: label, label: label }],\r\n                checkboxModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddText = ({ label }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"text\", name: label, label: label }],\r\n                textModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddHeading = ({ label, type }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"heading\", name: label, label: type }],\r\n                headingModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddSwitch = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"switch\", name: label, label: label }],\r\n                switchModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckboxgroup = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"checkboxgroup\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    checkboxgroupModal: false\r\n                }\r\n            })\r\n    }\r\n    handleAddRadio = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"radio\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    radioModal: false\r\n                }\r\n            })\r\n    }\r\n\r\n    handelAddTruthTable = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, ...this.state.tempTable],\r\n                tempTable: [],\r\n                tableModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddUpload = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"upload\", required: required, name: label, label: label }],\r\n                uploadModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    submitForm = async () => {\r\n        if (this.state.questions.length) {\r\n            console.log(this.state.questions)\r\n            this.setState({ loading: true })\r\n            await this.props.addExperimentForm(this.props.match.params.id, this.state.questions, this.props.match.params.expId)\r\n            this.setState({ loading: false })\r\n            this.props.history.goBack()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"form-builder\"  style={{margin: \"3%\", padding: \"2% \",border:\"2px solid black\"}}>\r\n                <div className=\"preview-form\" >\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Experiment Form</h2>\r\n                    <br/>\r\n                    <h2>Live Preview</h2>\r\n                    <Form onFinish={(values) => { console.log(values, this.state.questions) }}>\r\n\r\n                        {\r\n                            this.state.questions.map(field => {\r\n                                const { type, name, label, required } = field;\r\n\r\n                                switch (type) {\r\n                                    case 'input': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'textarea': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input.TextArea autoSize={{ minRows: 3, maxRows: 100 }} />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'number': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                    )\r\n                                    case 'checkbox': return (\r\n                                        <Form.Item name={name} valuePropName=\"checked\" label={label} initialValue={false}>\r\n                                            <Checkbox></Checkbox>\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'radio': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Radio.Group>\r\n                                                {field.values.map(rad =>\r\n                                                    <Radio value={rad}>{rad}</Radio>)}\r\n                                            </Radio.Group>\r\n\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'switch': return (\r\n                                        <Form.Item name=\"switch\" label=\"Switch\" valuePropName=\"checked\">\r\n                                            <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'text': {\r\n                                        console.log(label)\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'heading': {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                {label === 'h1' ? <h1>{name}</h1> : label === 'h2' ? <h2>{name}</h2> : label === 'h3' ? <h3>{name}</h3> : label === 'h4' ? <h4>{name}</h4> : label === 'h5' ? <h5>{name}</h5> : <h6>{name}</h6>}\r\n                                                {/* <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div> */}\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'checkboxgroup': {\r\n                                        return (\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]}>\r\n                                                <Checkbox.Group>\r\n                                                    {field.values.map(check =>\r\n                                                        <Checkbox value={check}>{check}</Checkbox>)}\r\n                                                </Checkbox.Group>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'row': {\r\n                                        return (\r\n                                            <div className=\"truth-table-row\">\r\n                                                {field.values.map(value => {\r\n                                                    if (value.startsWith('_switch_')) {\r\n                                                        return (\r\n                                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                            </Form.Item>\r\n\r\n                                                        )\r\n                                                        {/* <Form.Item>\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item> */}\r\n                                                    }\r\n                                                    else {\r\n                                                        return (\r\n                                                            <Form.Item >\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item>\r\n                                                        )\r\n                                                    }\r\n                                                })}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n\r\n                                    case 'upload': {\r\n                                        return (\r\n                                            <Form.Item name={name} label={label} valuePropName=\"fileList\" getValueFromEvent={normFile} rules={[\r\n                                                { required: required }]}>\r\n                                                <Upload>\r\n                                                    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                                                </Upload>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    default: return null\r\n                                }\r\n                            })\r\n                        }\r\n                        {/* <Form.Item >\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                </Button>\r\n                        </Form.Item> */}\r\n                    </Form>\r\n                </div>\r\n                <div className=\"form-tools\">\r\n                    <Button type=\"primary\" onClick={this.submitForm}>Save Form</Button>\r\n                    <Button danger onClick={() => this.setState({ questions: [] })}>Delete Form</Button>\r\n                    <Button onClick={() => this.setState({ inputModal: true })}>Input</Button>\r\n                    <Button onClick={() => this.setState({ textareaModal: true })}>Text Area</Button>\r\n                    <Button onClick={() => this.setState({ numberModal: true })}>Input Number</Button>\r\n                    <Button onClick={() => this.setState({ checkboxModal: true })}>Checkbox</Button>\r\n                    <Button onClick={() => this.setState({ checkboxgroupModal: true })}>Checkbox Group</Button>\r\n                    <Button onClick={() => this.setState({ radioModal: true })}>Radio</Button>\r\n                    <Button onClick={() => this.setState({ switchModal: true })}>Switch</Button>\r\n                    <Button onClick={() => this.setState({ textModal: true })}>Text</Button>\r\n                    <Button onClick={() => this.setState({ headingModal: true })}>Heading</Button>\r\n                    <Button onClick={() => this.setState({ tableModal: true })}>Table</Button>\r\n                    <Button onClick={() => this.setState({ uploadModal: true })}>Upload</Button>\r\n\r\n\r\n\r\n                </div>\r\n                <Modal\r\n                    visible={this.state.inputModal}\r\n                    title=\"Input\"\r\n                    onCancel={() => this.setState({ inputModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddInput}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textareaModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ textareaModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextarea}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.numberModal}\r\n                    title=\"Number\"\r\n                    onCancel={() => this.setState({ numberModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddNumber}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxModal}\r\n                    title=\"Check Box\"\r\n                    onCancel={() => this.setState({ checkboxModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckbox}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.switchModal}\r\n                    title=\"Switch\"\r\n                    onCancel={() => this.setState({ switchModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddSwitch}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textModal}\r\n                    title=\"Text\"\r\n                    onCancel={() => this.setState({ textModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddText}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea autoSize />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.headingModal}\r\n                    title=\"Heading\"\r\n                    onCancel={() => this.setState({ headingModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddHeading}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <p>*The greater the number , smaller the heading</p>\r\n                        <Form.Item\r\n                            label=\"Heading type\"\r\n                            name=\"type\"\r\n                            rules={[{ required: true }]}>\r\n                            <Radio.Group>\r\n                                <Radio value={'h1'}>h1</Radio>\r\n                                <Radio value={'h2'}>h2</Radio>\r\n                                <Radio value={'h3'}>h3</Radio>\r\n                                <Radio value={'h4'}>h4</Radio>\r\n                                <Radio value={'h5'}>h5</Radio>\r\n                                <Radio value={'h6'}>h6</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxgroupModal}\r\n                    title=\"CheckBox Group\"\r\n                    onCancel={() => this.setState({ checkboxgroupModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckboxgroup}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.radioModal}\r\n                    title=\"Radio\"\r\n                    onCancel={() => this.setState({ radioModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddRadio}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.tableModal}\r\n                    title=\"Table\"\r\n                    onCancel={() => this.setState({ tableModal: false, tempValue: '', tempTable: [] })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handelAddTruthTable}>\r\n\r\n                        <Button onClick={() => this.setState({ headingModal: true })}>Add Heading?</Button>\r\n                        <Form.Item\r\n                            label=\"Value\"\r\n                        >\r\n                            <Input value={this.state.tempValue} onChange={(e) => { this.setState({ tempValue: e.target.value }) }} style={{ width: \"150px\" }} />\r\n                        </Form.Item>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    if (tempTable.length) {\r\n                                        tempTable[tempTable.length - 1].values.push(tempValue)\r\n                                    }\r\n                                    else {\r\n                                        tempTable.push({\r\n                                            type: \"row\",\r\n                                            values: [tempValue]\r\n                                        })\r\n                                    }\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: ''\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the default value')\r\n                            }}>Add Box</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [tempValue]\r\n                                    })\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: \"\"\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the defult value')\r\n                            }}>Add Box in next row</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable } = this.state\r\n                                if (tempTable.length) {\r\n                                    tempTable[tempTable.length - 1].values.push(\"_switch_\" + uuid())\r\n                                }\r\n                                else {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [\"_switch_\" + uuid()]\r\n                                    })\r\n                                }\r\n                                this.setState(\r\n                                    {\r\n                                        tempTable\r\n                                    }\r\n                                )\r\n                            }}>Add user switch</Button>\r\n                        </div>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Confirm</Button>\r\n                        </Form.Item>\r\n                        <h3>Table Preview</h3>\r\n                        <Form>{this.state.tempTable.map(row => (\r\n                            <div className=\"truth-table-row\">\r\n                                {row.values.map(value => {\r\n                                    if (value.startsWith('_switch_')) {\r\n                                        return (\r\n                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    else {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        ))}</Form>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.uploadModal}\r\n                    title=\"Upload\"\r\n                    onCancel={() => this.setState({ uploadModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddUpload}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addExperimentForm: bindActionCreators(addExperimentForm, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExperimentForm)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor'\r\nimport { bindActionCreators } from 'redux'\r\nimport { Input, Form, Button, notification, Upload, Checkbox } from 'antd'\r\nimport { addExcercise, clearExcercise, getExcercise } from '../action'\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport axios from \"axios\"\r\nimport imageCompression from 'browser-image-compression';\r\n\r\nimport { baseUrl } from '../../../config';\r\n\r\nclass AddExcercise extends Component {\r\n\r\n    state = {\r\n        loading: false\r\n    }\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.props.currentCourse.excercise) {\r\n            console.log(\"has excercise, gotta call server\")\r\n            this.props.getExcercise(this.props.currentCourse.excercise)\r\n        } else {\r\n            console.log(\"does not ahve any excercise astart from the first\")\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.clearExcercise();\r\n    }\r\n\r\n    render() {\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 2 },\r\n            },\r\n        };\r\n\r\n        console.log(\"in render\")\r\n        console.log(this.props.currentCourse)\r\n\r\n        const options = {\r\n            maxSizeMB: 1,\r\n            // maxWidthOrHeight: 720,\r\n            useWebWorker: true\r\n        }\r\n\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n\r\n        if (this.props.currentCourse.excercise && this.props.excercise) {\r\n            console.log(\"FIRST FORM\")\r\n\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Excercise</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form initialValues={this.props.excercise} onFinish={async (val) => {\r\n                        const { excercise_list, excerciseFiles } = val;\r\n                        console.log(excercise_list);\r\n                        let newExcerciseFiles = []\r\n                        let excerciseFilePaths = []\r\n                        if (excerciseFiles) {\r\n                            newExcerciseFiles = excerciseFiles.map(file => ({\r\n                                name: file.name,\r\n                                response: file.response,\r\n                                uid: file.uid,\r\n                                status: file.status,\r\n                            }))\r\n\r\n                            excerciseFilePaths = excerciseFiles.map(file => (\r\n                                file.response.location\r\n                            ))\r\n                        }\r\n\r\n                        console.log(\"files\", newExcerciseFiles)\r\n                        console.log(\"paths\", excerciseFilePaths)\r\n                        if (excercise_list.length) {\r\n                            this.setState({ loading: true })\r\n                            await this.props.addExcercise(this.props.match.params.id, excercise_list, newExcerciseFiles, excerciseFilePaths, this.props.currentCourse.excercise)\r\n                            this.setState({ loading: false })\r\n                            this.props.clearExcercise()\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n                        }\r\n                    }}>\r\n                        <Form.Item\r\n                            valuePropName=\"fileList\"\r\n                            name=\"excerciseFiles\"\r\n                            getValueFromEvent={normFile}\r\n                        >\r\n                            <Upload multiple={false} accept=\".pdf\"\r\n                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                    let formData = new FormData()\r\n                                    formData.set('expId', '123')\r\n                                    formData.append('file', file)\r\n\r\n                                    await axios.post(`${baseUrl}/api/upload/excercise`, formData).then(res => {\r\n                                        onSuccess(res.data)\r\n                                        console.log(res.data)\r\n                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                }}\r\n                            // listType=\"picture\"\r\n                            >\r\n                                <Button>\r\n                                    <UploadOutlined /> Upload Files(Optional)\r\n                                </Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                        <Form.List name=\"excercise_list\" label=\"excercise_list\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                        rules={[{ required: true, message: 'Missing Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Hint${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc-hint\" + index}\r\n                                                        name={[field.name, 'hint']}\r\n                                                        fieldKey={[field.fieldKey, 'hint']}\r\n                                                    // rules={[{ required: true, message: 'Missing Hint' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Upload Needed? `}\r\n                                                        {...field}\r\n                                                        key={\"desc-isUpload\" + index}\r\n                                                        name={[field.name, 'isUpload']}\r\n                                                        fieldKey={[field.fieldKey, 'isUpload']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Code Needed ?`}\r\n                                                        {...field}\r\n                                                        key={\"desc-isCode\" + index}\r\n                                                        name={[field.name, 'isCode']}\r\n                                                        fieldKey={[field.fieldKey, 'isCode']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n\r\n                    </Form>\r\n                </div>\r\n            )\r\n        } else if (!this.props.currentCourse.excercise) {\r\n            console.log(\"SECOND FORM\")\r\n            return (\r\n                <div style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Excercise</h2>\r\n                    ***Don't Reload before Saving! Changes may get lost ***\r\n                    <Form onFinish={async (val) => {\r\n                        console.log(\"valllll\", val)\r\n                        const { excercise_list, excerciseFiles } = val;\r\n                        // console.log(\"list\", excercise_list)\r\n                        // console.log(\"files\", excerciseFiles)\r\n                        let newExcerciseFiles = []\r\n                        let excerciseFilePaths = []\r\n                        if (excerciseFiles) {\r\n                            newExcerciseFiles = excerciseFiles.map(file => ({\r\n                                name: file.name,\r\n                                response: file.response,\r\n                                uid: file.uid,\r\n                                status: file.status,\r\n                            }))\r\n\r\n                            excerciseFilePaths = excerciseFiles.map(file => (\r\n                                file.response.location\r\n                            ))\r\n                        }\r\n\r\n                        console.log(\"files\", newExcerciseFiles)\r\n                        console.log(\"paths\", excerciseFilePaths)\r\n\r\n                        if (excercise_list?.length) {\r\n\r\n                            this.setState({ loading: true })\r\n                            await this.props.addExcercise(this.props.match.params.id, excercise_list, newExcerciseFiles, excerciseFilePaths, this.props.currentCourse.excercise)\r\n                            this.setState({ loading: false })\r\n                            this.props.clearExcercise()\r\n                            this.props.history.goBack()\r\n                        } else {\r\n                            this.openNotificationWithIcon('error', 'Please make sure at least one step is there')\r\n\r\n                        }\r\n\r\n\r\n                    }}>\r\n\r\n                        <Form.Item\r\n                            valuePropName=\"fileList\"\r\n                            name=\"excerciseFiles\"\r\n                            getValueFromEvent={normFile}\r\n                        >\r\n                            <Upload multiple={false} accept=\".pdf\"\r\n                                name=\"file\" customRequest={async ({ file, onSuccess, onError }) => {\r\n                                    let formData = new FormData()\r\n                                    formData.set('expId', '123')\r\n                                    formData.append('file', file)\r\n\r\n                                    await axios.post(`${baseUrl}/api/upload/excercise`, formData).then(res => {\r\n                                        onSuccess(res.data)\r\n                                        console.log(res.data)\r\n                                    }).catch(err => { console.log(\"error in uploading\"); onError(\"Error in uploading.Try again\") })\r\n                                }}\r\n                            // listType=\"picture\"\r\n                            >\r\n                                <Button>\r\n                                    <UploadOutlined /> Upload Files(Optional)\r\n                                </Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                        <Form.List name=\"excercise_list\" label=\"excercise_list\" rules={[{ required: true }]}>\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <div key={\"unique\" + index} style={{ display: 'flex', alignItems: \"center\", }} >\r\n                                                <div style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}>\r\n                                                    <Form.Item\r\n                                                        label={`Question${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc-question\" + index}\r\n                                                        name={[field.name, 'question']}\r\n                                                        fieldKey={[field.fieldKey, 'question']}\r\n                                                        rules={[{ required: true, message: 'Missing Question' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Hint${index + 1}`}\r\n                                                        {...field}\r\n                                                        key={\"desc-hint\" + index}\r\n                                                        name={[field.name, 'hint']}\r\n                                                        fieldKey={[field.fieldKey, 'hint']}\r\n                                                    // rules={[{ required: true, message: 'Missing hint' }]}\r\n                                                    >\r\n                                                        <Input.TextArea style={{ width: \"90%\" }} autoSize={{ minRows: 2 }} />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Upload Needed ?`}\r\n                                                        {...field}\r\n                                                        key={\"desc-isUpload\" + index}\r\n                                                        name={[field.name, 'isUpload']}\r\n                                                        fieldKey={[field.fieldKey, 'isUpload']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        label={`Code Needed ?`}\r\n                                                        {...field}\r\n                                                        key={\"desc-isCode\" + index}\r\n                                                        name={[field.name, 'isCode']}\r\n                                                        fieldKey={[field.fieldKey, 'isCode']}\r\n                                                        valuePropName=\"checked\"\r\n                                                        initialValue={false}\r\n\r\n\r\n                                                    >\r\n                                                        <Checkbox />\r\n                                                    </Form.Item>\r\n                                                </div>\r\n\r\n\r\n                                                <MinusCircleOutlined\r\n                                                    style={{ color: \"red\", fontSize: \"20px\" }}\r\n                                                    onClick={() => {\r\n                                                        remove(field.name);\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add Step\r\n                                        </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n\r\n                        <Form.Item>\r\n                            <Button loading={this.state.loading} type=\"primary\" htmlType=\"submit\">Add/Update</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>)\r\n        }\r\n        else {\r\n            console.log(\"DSadasd\")\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n    excercise: state.courseReducer.excercise\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getExcercise: bindActionCreators(getExcercise, dispatch),\r\n    addExcercise: bindActionCreators(addExcercise, dispatch),\r\n    clearExcercise: bindActionCreators(clearExcercise, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddExcercise)","import { Card, Layout, Menu } from 'antd';\r\nimport React from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { COURSE } from \"../../config\"\r\nimport './index.scss';\r\n// import SignUpForm from \"../Auth\"\r\n\r\nclass CreatorHome extends React.Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n    render() {\r\n        return (\r\n            // <div className=\"client-mainHome-container\" style={{ backgroundColor: \"#001A2F\", height: \"100vh\", alignItems: \"center\" }}>\r\n            <Layout style={{ backgroundColor: \"#001A2F\" }}>\r\n                {/* <SignUpForm/> */}\r\n                <div className=\"client-mainHome-container\" style={{ backgroundColor: \"#001A2F\", minHeight: \"calc( 100vh - 46px )\", alignItems: \"center\" }}>\r\n                    <h1 style={{ color: \"white\", fontWeight: \"bolder\", fontSize: \"48px\" }} className=\"lineContainer\">CREATOR HOME</h1>\r\n                    <Link to=\"/admin/arduino\" className=\"client-mainHome-link\" style={{ borderRadius: 15 }}>\r\n                        <Card\r\n                            bordered={false}\r\n                            hoverable\r\n                            cover={<img alt=\"example\" src=\"https://a.pololu-files.com/picture/0J7808.1200.jpg?8a7bee07ca7ffbb11e11f74e99f5c3a9\" />}\r\n                            style={{ backgroundColor: \"rgba(130, 199, 254, 0.2)\", borderRadius: 15 }}\r\n                        >\r\n                            <p style={{ color: \"white\", margin: 0, textAlign: \"center\" }}>ARDUINO</p>\r\n                        </Card>\r\n                    </Link>\r\n\r\n                    <Link to=\"/admin/digital\" className=\"client-mainHome-link\" style={{ borderRadius: 15 }}>\r\n                        <Card\r\n                            bordered={false}\r\n                            hoverable\r\n                            cover={<img alt=\"example\" src=\"https://www.ie.edu/insights/wp-content/uploads/2017/05/Prueba-y-aprendizaje-transformacion-cultural-en-la-era-digital.jpg\" />}\r\n                            style={{ backgroundColor: \"rgba(130, 199, 254, 0.2)\", borderRadius: 15 }}\r\n                        >\r\n                            <p style={{ color: \"white\", margin: 0, textAlign: \"center\" }}>DIGITAL</p>\r\n                        </Card>\r\n                    </Link>\r\n                </div>\r\n            </Layout >\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreatorHome","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport TextEditor from '../../TextEditor'\r\nimport { bindActionCreators } from 'redux'\r\nimport axios from 'axios'\r\nimport { uuid } from 'uuidv4'\r\n\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Checkbox,\r\n    Radio,\r\n    Modal,\r\n    InputNumber,\r\n    notification,\r\n    Switch,\r\n    Upload\r\n} from 'antd';\r\nimport { MinusCircleOutlined, PlusOutlined, UploadOutlined } from '@ant-design/icons';\r\nimport { addResults } from '../action'\r\nimport { baseUrl } from '../../../config'\r\n\r\nclass AddResults extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: false,\r\n            inputModal: false,\r\n            textareaModal: false,\r\n            numberModal: false,\r\n            checkboxModal: false,\r\n            radioModal: false,\r\n            switchModal: false,\r\n            checkboxgroupModal: false,\r\n            headingModal: false,\r\n            textModal: false,\r\n            tableModal: false,\r\n            uploadModal: false,\r\n            tempTable: [],\r\n            tempValue: '',\r\n\r\n            questions: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        if (this.props.currentCourse.results) {\r\n            console.log(\"has , gotta call server\")\r\n            // this.props.getExperimentForm(this.props.currentCourse.experiment)\r\n            axios.get(`${baseUrl}/api/course/results/get/${this.props.currentCourse.results}`)\r\n                .then(res => res.data)\r\n                .then(results => {\r\n                    if (results.results) {\r\n                        this.setState({ questions: results.results.formContent })\r\n                    }\r\n                })\r\n                .catch(err => console.log(\"error in getting results form\"))\r\n        } else {\r\n            console.log(\"does not ahve any introduction astart from the first\")\r\n        }\r\n    }\r\n\r\n\r\n\r\n    openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: message,\r\n        });\r\n    };\r\n\r\n    handleAddInput = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"input\", required: required ? true : false, name: label, label: label }],\r\n                inputModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddTextarea = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"textarea\", required: required ? true : false, name: label, label: label }],\r\n                textareaModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddNumber = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"number\", required: required ? true : false, name: label, label: label }],\r\n                numberModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckbox = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"checkbox\", name: label, label: label }],\r\n                checkboxModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddText = ({ label }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"text\", name: label, label: label }],\r\n                textModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddHeading = ({ label, type }) => {\r\n        console.log(label)\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"heading\", name: label, label: type }],\r\n                headingModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddSwitch = ({ label }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"switch\", name: label, label: label }],\r\n                switchModal: false\r\n            }\r\n        })\r\n    }\r\n    handleAddCheckboxgroup = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"checkboxgroup\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    checkboxgroupModal: false\r\n                }\r\n            })\r\n    }\r\n    handleAddRadio = ({ label, required, values }) => {\r\n        if (!values) {\r\n            this.openNotificationWithIcon('error', 'You have to add atleast one option')\r\n        }\r\n        else\r\n            this.setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    questions: [...prevState.questions, { type: \"radio\", name: label, required: required ? true : false, label: label, values: values }],\r\n                    radioModal: false\r\n                }\r\n            })\r\n    }\r\n\r\n    handelAddTruthTable = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, ...this.state.tempTable],\r\n                tempTable: [],\r\n                tableModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAddUpload = ({ label, required }) => {\r\n        this.setState(prevState => {\r\n            return {\r\n                ...prevState,\r\n                questions: [...prevState.questions, { type: \"upload\", required: required, name: label, label: label }],\r\n                uploadModal: false\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    submitForm = async () => {\r\n        if (this.state.questions.length) {\r\n            console.log(this.state.questions)\r\n            this.setState({ loading: true })\r\n            await this.props.addResults(this.props.match.params.id, this.state.questions, this.props.currentCourse.results)\r\n            this.setState({ loading: false })\r\n            this.props.history.goBack()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 4 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 20 },\r\n            },\r\n        };\r\n        const formItemLayoutWithOutLabel = {\r\n            wrapperCol: {\r\n                xs: { span: 24, offset: 0 },\r\n                sm: { span: 20, offset: 4 },\r\n            },\r\n        };\r\n        const normFile = e => {\r\n            console.log('Upload event:', e);\r\n            if (Array.isArray(e)) {\r\n                return e;\r\n            }\r\n            return e && e.fileList;\r\n        };\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"form-builder\" style={{ margin: \"3%\", padding: \"2% \", border: \"2px solid black\" }}>\r\n                <div className=\"preview-form\" >\r\n                    <h2>{this.props.currentCourse.name.toUpperCase()} : Results And Analysis </h2>\r\n                    <br />\r\n                    <h2>Live Preview</h2>\r\n                    <Form layout=\"vertical\" onFinish={(values) => { console.log(values, this.state.questions) }}>\r\n\r\n                        {\r\n                            this.state.questions.map(field => {\r\n                                const { type, name, label, required } = field;\r\n\r\n                                switch (type) {\r\n                                    case 'input': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'textarea': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Input.TextArea autoSize={{ minRows: 3, maxRows: 100 }} />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'number': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <InputNumber />\r\n                                        </Form.Item>\r\n                                    )\r\n                                    case 'checkbox': return (\r\n                                        <Form.Item name={name} valuePropName=\"checked\" label={label} initialValue={false}>\r\n                                            <Checkbox></Checkbox>\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'radio': return (\r\n                                        <Form.Item label={label} name={name} rules={[\r\n                                            { required: required }\r\n                                        ]}>\r\n                                            <Radio.Group>\r\n                                                {field.values.map(rad =>\r\n                                                    <Radio value={rad}>{rad}</Radio>)}\r\n                                            </Radio.Group>\r\n\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'switch': return (\r\n                                        <Form.Item name=\"switch\" label=\"Switch\" valuePropName=\"checked\">\r\n                                            <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                        </Form.Item>\r\n                                    )\r\n                                        break;\r\n                                    case 'text': {\r\n                                        console.log(label)\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'heading': {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                {label === 'h1' ? <h1>{name}</h1> : label === 'h2' ? <h2>{name}</h2> : label === 'h3' ? <h3>{name}</h3> : label === 'h4' ? <h4>{name}</h4> : label === 'h5' ? <h5>{name}</h5> : <h6>{name}</h6>}\r\n                                                {/* <div style={{ whiteSpace: \"pre-wrap\" }}>{name}</div> */}\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'checkboxgroup': {\r\n                                        return (\r\n                                            <Form.Item label={label} name={name} rules={[\r\n                                                { required: required }\r\n                                            ]}>\r\n                                                <Checkbox.Group>\r\n                                                    {field.values.map(check =>\r\n                                                        <Checkbox value={check}>{check}</Checkbox>)}\r\n                                                </Checkbox.Group>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n                                    case 'row': {\r\n                                        return (\r\n                                            <div className=\"truth-table-row\">\r\n                                                {field.values.map(value => {\r\n                                                    if (value.startsWith('_switch_')) {\r\n                                                        return (\r\n                                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                                            </Form.Item>\r\n\r\n                                                        )\r\n                                                        {/* <Form.Item>\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item> */}\r\n                                                    }\r\n                                                    else {\r\n                                                        return (\r\n                                                            <Form.Item >\r\n                                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                                            </Form.Item>\r\n                                                        )\r\n                                                    }\r\n                                                })}\r\n                                            </div>\r\n                                        )\r\n                                    }\r\n                                        break;\r\n\r\n                                    case 'upload': {\r\n                                        return (\r\n                                            <Form.Item name={name} label={label} valuePropName=\"fileList\" getValueFromEvent={normFile} rules={[\r\n                                                { required: required }]}>\r\n                                                <Upload>\r\n                                                    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n                                                </Upload>\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    default: return null\r\n                                }\r\n                            })\r\n                        }\r\n                        {/* <Form.Item >\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Submit\r\n                </Button>\r\n                        </Form.Item> */}\r\n                    </Form>\r\n                </div>\r\n                <div className=\"form-tools\">\r\n                    <Button type=\"primary\" onClick={this.submitForm}>Save/Update Form</Button>\r\n                    <Button danger onClick={() => this.setState({ questions: [] })}>Delete Form</Button>\r\n                    <Button onClick={() => this.setState({ inputModal: true })}>Input</Button>\r\n                    <Button onClick={() => this.setState({ textareaModal: true })}>Text Area</Button>\r\n                    <Button onClick={() => this.setState({ numberModal: true })}>Input Number</Button>\r\n                    <Button onClick={() => this.setState({ checkboxModal: true })}>Checkbox</Button>\r\n                    <Button onClick={() => this.setState({ checkboxgroupModal: true })}>Checkbox Group</Button>\r\n                    <Button onClick={() => this.setState({ radioModal: true })}>Radio</Button>\r\n                    <Button onClick={() => this.setState({ switchModal: true })}>Switch</Button>\r\n                    <Button onClick={() => this.setState({ textModal: true })}>Text</Button>\r\n                    <Button onClick={() => this.setState({ headingModal: true })}>Heading</Button>\r\n                    <Button onClick={() => this.setState({ tableModal: true })}>Table</Button>\r\n                    <Button onClick={() => this.setState({ uploadModal: true })}>Upload</Button>\r\n\r\n\r\n\r\n                </div>\r\n                <Modal\r\n                    visible={this.state.inputModal}\r\n                    title=\"Input\"\r\n                    onCancel={() => this.setState({ inputModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddInput}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textareaModal}\r\n                    title=\"Text Area\"\r\n                    onCancel={() => this.setState({ textareaModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddTextarea}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.numberModal}\r\n                    title=\"Number\"\r\n                    onCancel={() => this.setState({ numberModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddNumber}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxModal}\r\n                    title=\"Check Box\"\r\n                    onCancel={() => this.setState({ checkboxModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckbox}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.switchModal}\r\n                    title=\"Switch\"\r\n                    onCancel={() => this.setState({ switchModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddSwitch}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.textModal}\r\n                    title=\"Text\"\r\n                    onCancel={() => this.setState({ textModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddText}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea autoSize />\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.headingModal}\r\n                    title=\"Heading\"\r\n                    onCancel={() => this.setState({ headingModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddHeading}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <p>*The greater the number , smaller the heading</p>\r\n                        <Form.Item\r\n                            label=\"Heading type\"\r\n                            name=\"type\"\r\n                            rules={[{ required: true }]}>\r\n                            <Radio.Group>\r\n                                <Radio value={'h1'}>h1</Radio>\r\n                                <Radio value={'h2'}>h2</Radio>\r\n                                <Radio value={'h3'}>h3</Radio>\r\n                                <Radio value={'h4'}>h4</Radio>\r\n                                <Radio value={'h5'}>h5</Radio>\r\n                                <Radio value={'h6'}>h6</Radio>\r\n                            </Radio.Group>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.checkboxgroupModal}\r\n                    title=\"CheckBox Group\"\r\n                    onCancel={() => this.setState({ checkboxgroupModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddCheckboxgroup}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.radioModal}\r\n                    title=\"Radio\"\r\n                    onCancel={() => this.setState({ radioModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddRadio}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.List name=\"values\">\r\n                            {(fields, { add, remove }) => {\r\n                                return (\r\n                                    <div>\r\n                                        {fields.map((field, index) => (\r\n                                            <Form.Item\r\n                                                {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\r\n                                                label={index === 0 ? 'Options' : ''}\r\n                                                required={false}\r\n                                                key={field.key}\r\n                                            >\r\n                                                <Form.Item\r\n                                                    {...field}\r\n                                                    validateTrigger={['onChange', 'onBlur']}\r\n                                                    rules={[\r\n                                                        {\r\n                                                            required: true,\r\n                                                            whitespace: true,\r\n                                                            message: \"Please fill the option or delete this field.\",\r\n                                                        },\r\n                                                    ]}\r\n                                                    noStyle\r\n                                                >\r\n                                                    <Input placeholder=\"option\" style={{ width: '60%' }} />\r\n                                                </Form.Item>\r\n                                                {fields.length > 1 ? (\r\n                                                    <MinusCircleOutlined\r\n                                                        className=\"dynamic-delete-button\"\r\n                                                        style={{ margin: '0 8px' }}\r\n                                                        onClick={() => {\r\n                                                            remove(field.name);\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                            </Form.Item>\r\n                                        ))}\r\n                                        <Form.Item {...formItemLayoutWithOutLabel}>\r\n                                            <Button\r\n                                                type=\"dashed\"\r\n                                                onClick={() => {\r\n                                                    add();\r\n                                                }}\r\n                                                style={{ width: '60%', alignSelf: \"center\" }}\r\n                                            >\r\n                                                <PlusOutlined /> Add options\r\n                </Button>\r\n                                        </Form.Item>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        </Form.List>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n                <Modal\r\n                    visible={this.state.tableModal}\r\n                    title=\"Table\"\r\n                    onCancel={() => this.setState({ tableModal: false, tempValue: '', tempTable: [] })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handelAddTruthTable}>\r\n\r\n                        <Button onClick={() => this.setState({ headingModal: true })}>Add Heading?</Button>\r\n                        <Form.Item\r\n                            label=\"Value\"\r\n                        >\r\n                            <Input value={this.state.tempValue} onChange={(e) => { this.setState({ tempValue: e.target.value }) }} style={{ width: \"150px\" }} />\r\n                        </Form.Item>\r\n                        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    if (tempTable.length) {\r\n                                        tempTable[tempTable.length - 1].values.push(tempValue)\r\n                                    }\r\n                                    else {\r\n                                        tempTable.push({\r\n                                            type: \"row\",\r\n                                            values: [tempValue]\r\n                                        })\r\n                                    }\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: ''\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the default value')\r\n                            }}>Add Box</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable, tempValue } = this.state\r\n                                if (tempValue) {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [tempValue]\r\n                                    })\r\n                                    this.setState(\r\n                                        {\r\n                                            tempTable,\r\n                                            tempValue: \"\"\r\n                                        }\r\n                                    )\r\n                                }\r\n                                else\r\n                                    this.openNotificationWithIcon('warning', 'Please enter the defult value')\r\n                            }}>Add Box in next row</Button>\r\n                            <Button onClick={() => {\r\n                                let { tempTable } = this.state\r\n                                if (tempTable.length) {\r\n                                    tempTable[tempTable.length - 1].values.push(\"_switch_\" + uuid())\r\n                                }\r\n                                else {\r\n                                    tempTable.push({\r\n                                        type: \"row\",\r\n                                        values: [\"_switch_\" + uuid()]\r\n                                    })\r\n                                }\r\n                                this.setState(\r\n                                    {\r\n                                        tempTable\r\n                                    }\r\n                                )\r\n                            }}>Add user switch</Button>\r\n                        </div>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Confirm</Button>\r\n                        </Form.Item>\r\n                        <h3>Table Preview</h3>\r\n                        <Form>{this.state.tempTable.map(row => (\r\n                            <div className=\"truth-table-row\">\r\n                                {row.values.map(value => {\r\n                                    if (value.startsWith('_switch_')) {\r\n                                        return (\r\n                                            <Form.Item className=\"switch\" name={value} valuePropName=\"checked\" initialValue={false}>\r\n                                                <Switch checkedChildren=\"1\" unCheckedChildren=\"0\" />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                    else {\r\n                                        return (\r\n                                            <Form.Item >\r\n                                                <InputNumber defaultValue={value} disabled style={{ color: \"black\", textAlign: \"center\" }} />\r\n                                            </Form.Item>\r\n                                        )\r\n                                    }\r\n                                })}\r\n                            </div>\r\n                        ))}</Form>\r\n                    </Form>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    visible={this.state.uploadModal}\r\n                    title=\"Upload\"\r\n                    onCancel={() => this.setState({ uploadModal: false })}\r\n                    footer={[]}\r\n                    destroyOnClose\r\n                >\r\n                    <Form onFinish={this.handleAddUpload}>\r\n                        <Form.Item\r\n                            label=\"Label\"\r\n                            name=\"label\"\r\n                            rules={[{ required: true }]}\r\n                        >\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"required\" valuePropName=\"checked\">\r\n                            <Checkbox>Required</Checkbox>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Add</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div >\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentCourse: state.courseReducer.currentCourse,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addResults: bindActionCreators(addResults, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddResults)","import axios from \"axios\";\r\n\r\nconst setAuthToken = token => {\r\n    if (token) {\r\n        // Apply authorization token to every request if logged in\r\n        axios.defaults.headers.common[\"Authorization\"] = token;\r\n    } else {\r\n        // Delete auth header\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\nexport default setAuthToken;\r\n","export const ACTION = {\r\n    GET_ERRORS: \"GET_ERRORS\",\r\n    USER_LOADING: \"USER_LOADING\",\r\n    SET_CURRENT_USER: \"SET_CURRENT_USER\",\r\n    CLEAR_ERRORS: \"CLEAR_ERRORS\"\r\n};","import axios from \"axios\";\r\nimport setAuthToken from \"../../utils/setAuthToken\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nimport { ACTION } from \"./constants\";\r\nimport { baseUrl } from \"../../config\";\r\n\r\n// Login - get user token\r\nexport const loginAdmin = userData => async dispatch => {\r\n    await axios\r\n        .post(`${baseUrl}/api/auth/login-admin`, userData)\r\n        .then(res => {\r\n            // Save to localStorage\r\n\r\n            // Set token to localStorage\r\n            const { token } = res.data;\r\n            localStorage.setItem(\"jwtToken\", token);\r\n            // Set token to Auth header\r\n            setAuthToken(token);\r\n            // Decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            // Set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err => {\r\n            console.log(\"ERROR,\", err);\r\n            dispatch({\r\n                type: ACTION.GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        });\r\n};\r\n\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n    return {\r\n        type: ACTION.SET_CURRENT_USER,\r\n        payload: decoded\r\n    };\r\n};\r\n\r\n// User loading\r\nexport const setUserLoading = () => {\r\n    return {\r\n        type: ACTION.USER_LOADING\r\n    };\r\n};\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to empty object {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n    dispatch({\r\n        type: 'LOGOUT'\r\n    })\r\n};\r\n\r\n\r\nexport const clearErrors = () => dispatch => {\r\n    dispatch({\r\n        type: ACTION.CLEAR_ERRORS\r\n    })\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Form, Input, Button, Checkbox, Row } from 'antd';\r\nimport './styles.scss';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginAdmin } from './action';\r\n\r\nconst Login = (props) => {\r\n\r\n    useEffect(() => {\r\n        if (props.auth.isAuthenticated) {\r\n            props.history.push(\"/admin\")\r\n        }\r\n    }, [props])\r\n\r\n\r\n    const [loading, setloading] = useState(false)\r\n\r\n    const onFinish = async values => {\r\n        console.log(values)\r\n        setloading(true);\r\n        await props.loginAdmin(values);\r\n        setloading(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"signup-form-container\">\r\n            <h1 style={{ textAlign: 'center', fontSize: 'xx-large' }}>\r\n                LOGIN\r\n            </h1>\r\n            <Row type=\"flex\" justify=\"center\" align=\"middle\" >\r\n                <Form\r\n                    // {...layout}\r\n                    name=\"basic\"\r\n                    initialValues={{\r\n                        remember: true,\r\n                    }}\r\n                    onFinish={onFinish}\r\n                >\r\n                    <Form.Item\r\n                        label=\"E-mail\"\r\n                        name=\"email\"\r\n                        rules={[\r\n                            {\r\n                                type: 'email',\r\n                                message: 'The input is not valid E-mail!',\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your E-mail!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input your password!',\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Input.Password />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    // {...tailLayout}\r\n                    >\r\n                        <Button loading={loading} type=\"primary\" htmlType=\"submit\">\r\n                            Submit\r\n                    </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Row>\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.authReducer\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginAdmin: bindActionCreators(loginAdmin, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PrivateRoute = ({ component: Component, auth, my, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props =>\r\n            auth.isAuthenticated === true ? <Component  {...props} /> : (\r\n                <Redirect to=\"/admin/login\" />\r\n            )\r\n        }\r\n    />\r\n);\r\n\r\nPrivateRoute.propTypes = {\r\n    auth: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    auth: state.authReducer\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import { ACTION } from \"./constants\";\r\n\r\nconst initialState = {\r\n    content: ''\r\n}\r\n\r\nconst textEditor2Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.SET_CONTENT:\r\n            state = { ...state, content: action.payload }\r\n            break;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default textEditor2Reducer;","import { ACTION } from './constants';\r\n\r\nconst initialState = {\r\n    modules: [],\r\n    currentModule: {},\r\n    courseTroubleshoot: [],\r\n    updateModule: false,\r\n    updateSubModule: false,\r\n};\r\n\r\nconst modulesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.GET_MODULES:\r\n            state = { ...state, modules: action.payload };\r\n            break;\r\n        case ACTION.GET_CURRENT_MODULE:\r\n            state = { ...state, currentModule: action.payload };\r\n            break;\r\n        case ACTION.GET_COURSE_TROUBLESHOOT:\r\n            state = { ...state, courseTroubleshoot: action.payload };\r\n            break;\r\n        case ACTION.UPDATE_COURSE:\r\n            state = { ...state, updateModule: true };\r\n            break;\r\n        case ACTION.UPDATE_SUBMOD:\r\n            state = {...state, updateSubModule:true}\r\n            break;\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nexport default modulesReducer;\r\n","import { ACTION } from \"./constants\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    introduction: '',\r\n    addModuleSuccess: false\r\n}\r\n\r\nconst addModuleReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.ADD_MODULE_SUCCESS:\r\n            state = { ...state, addModuleSuccess: true }\r\n            break;\r\n        case ACTION.SET_MODULE_NAME:\r\n            state = { ...state, name: action.payload }\r\n            break;\r\n        case ACTION.SET_MODULE_INTRODUCTION:\r\n            state = { ...state, introduction: action.payload }\r\n            break;\r\n        case ACTION.CLEAR_ADD_MODULE:\r\n            state = { ...initialState }\r\n            break;\r\n        default:\r\n            state = state;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default addModuleReducer;","import { ACTION } from \"./constants\";\r\n\r\nconst initialState = {\r\n    name: '',\r\n    thumbnailPath: '',\r\n    addCourseSuccess: false\r\n}\r\n\r\nconst addCourseReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.ADD_COURSE_SUCCESS:\r\n            state = { ...state, addCourseSuccess: true }\r\n        case ACTION.SET_COURSE_NAME:\r\n            state = { ...state, name: action.payload }\r\n            break;\r\n        case ACTION.SET_COURSE_THUMBNAIL:\r\n            state = { ...state, thumbnailPath: action.payload }\r\n            break;\r\n        case ACTION.CLEAR_ADD_COURSE:\r\n            state = { ...initialState }\r\n            break;\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default addCourseReducer;","const { ACTION } = require(\"./constants\");\r\n\r\nconst initialState = {\r\n    currentCourse: {},\r\n    introductionHtml: '',\r\n    addIntroductionSuccess: false,\r\n\r\n\r\n    buildCircuit: null,\r\n    addBuildCircuitSuccess: false,\r\n\r\n\r\n    experiment: null,\r\n    addExperimentSuccess: false,\r\n\r\n\r\n\r\n    troubleshoot: null,\r\n    addTroubleshootSuccess: false,\r\n\r\n    excercise: null,\r\n    addExcerciseSuccess: false\r\n\r\n}\r\n\r\nconst courseReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.GET_CURRENT_COURSE:\r\n            state = { ...state, currentCourse: action.payload }\r\n            break;\r\n        case ACTION.GET_CURRENT_PARENT:\r\n            state = { ...state, currentParent: action.payload }\r\n            break;\r\n        case ACTION.SET_INTRODUCTION_HTML:\r\n            state = { ...state, introductionHtml: action.payload }\r\n            break;\r\n        case ACTION.GET_INTRODCUTION_HTML:\r\n            state = { ...state, introductionHtml: action.payload }\r\n            break;\r\n        case ACTION.ADD_INTRODUCTION_SUCCESS:\r\n            state = { ...state, addIntroductionSuccess: true }\r\n            break;\r\n        case ACTION.CLEAR_INTRODUCTION:\r\n            state = { ...state, introductionHtml: \"\", addIntroductionSuccess: false }\r\n            break;\r\n\r\n\r\n        case ACTION.GET_BUILD_CIRCUIT:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, buildCircuit: JSON.parse(JSON.stringify(action.payload)) }\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_BUILD_CIRCUIT_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addBuildCircuitSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_BUILD_CIRCUIT:\r\n            state = { ...state, buildCircuit: null, addBuildCircuitSuccess: false }\r\n            break;\r\n\r\n                     \r\n        case ACTION.GET_EXPERIMENT:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, experiment: action.payload}\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_EXPERIMENT_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addExperimentSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_EXPERIMENT:\r\n            state = { ...state, experiment: null, addExperimentSuccess: false }\r\n            break;\r\n\r\n\r\n        case ACTION.GET_TROUBLESHOOT:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, troubleshoot: action.payload}\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_TROUBLESHOOT_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addTroubleshootSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_TROUBLESHOOT:\r\n            state = { ...state, troubleshoot: null, addTroubleshootSuccess: false }\r\n            break;\r\n\r\n\r\n        case ACTION.GET_EXCERCISE:\r\n            {\r\n                console.log(\"ehy  am i here\")\r\n                console.log(action.payload)\r\n                state = { ...state, excercise: action.payload}\r\n                break;\r\n            }\r\n\r\n        case ACTION.ADD_EXCERCISE_SUCCESS:\r\n            {\r\n                console.log(\"add building\")\r\n                state = { ...state, addExcerciseSuccess: true }\r\n                break;\r\n            }\r\n\r\n        case ACTION.CLEAR_EXCERCISE:\r\n            state = { ...state, excercise: null, addExcerciseSuccess: false }\r\n            break;\r\n\r\n        default:\r\n            state = state;\r\n\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default courseReducer","import { ACTION } from \"./constants\";\r\n\r\nconst isEmpty = require(\"is-empty\");\r\n\r\nconst initialState = {\r\n    isAuthenticated: false,\r\n    user: {},\r\n    loading: false,\r\n    errors: {}\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ACTION.SET_CURRENT_USER:\r\n            return {\r\n                ...state,\r\n                isAuthenticated: !isEmpty(action.payload),\r\n                user: action.payload\r\n            };\r\n        case ACTION.USER_LOADING:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            };\r\n        case ACTION.GET_ERRORS:\r\n            return {\r\n                ...state,\r\n                errors: action.payload\r\n            };\r\n        case ACTION.CLEAR_ERRORS:\r\n            return {\r\n                ...state,\r\n                errors: {}\r\n            }\r\n        case 'LOGOUT':\r\n            return {\r\n                ...initialState\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { composeWithDevTools as compose } from \"redux-devtools-extension/developmentOnly\";\r\nimport thunk from \"redux-thunk\"\r\nimport textEditor2Reducer from \"./components/TextEditor2/reducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport modulesReducer from \"./components/Modules/reducer\";\r\nimport addModuleReducer from \"./components/Modules/AddModule/reducer\";\r\nimport addCourseReducer from \"./components/Course/AddCourse/reducer\";\r\nimport courseReducer from \"./components/Course/reducer\";\r\nimport authReducer from \"./components/Auth/reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    textEditor2Reducer,\r\n    modulesReducer,\r\n    addModuleReducer,\r\n    addCourseReducer,\r\n    courseReducer,\r\n    authReducer\r\n});\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\nexport const store = createStore(\r\n    persistedReducer,\r\n    {},\r\n    compose(applyMiddleware(thunk))\r\n)\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\r\nimport \"./App.scss\"\r\nimport TextEditor2 from './components/TextEditor2';\r\nimport LivePreview from './components/TextEditor2/LivePreview';\r\nimport FormBuilder from './components/FormBuilder';\r\nimport 'antd/dist/antd.css';\r\nimport BuildCircuitBuilder from './components/BuildCircuitBuilder';\r\nimport Modules from './components/Modules';\r\nimport { NavLink, withRouter, Route, Switch } from 'react-router-dom';\r\nimport AddModule from './components/Modules/AddModule';\r\nimport AddModuleConf from './components/Starter/AddModule';\r\nimport TextEditor from './components/TextEditor';\r\nimport Module from './components/Modules/Module';\r\nimport AddCourse from './components/Course/AddCourse';\r\nimport Course from './components/Course';\r\nimport AddIntroduction from './components/Course/AddIntroduction';\r\nimport AddExperiment from './components/Course/AddExperiment';\r\nimport AddTroubleshoot from './components/Course/AddTroubleshoot';\r\nimport AddBuildCircuit from './components/Course/AddBuildCircuit';\r\nimport AddExperimentForm from './components/Course/AddExperimentForm';\r\nimport AddExcercise from './components/Course/AddExcercise';\r\nimport CreatorHome from './components/CreatorHome';\r\nimport AddResults from './components/Course/AddResults';\r\nimport Login from \"./components/Auth/Login\"\r\nimport PrivateRoute from \"./components/Auth/PrivateRoute\"\r\nimport { Menu } from \"antd\";\r\nimport { HomeFilled } from '@ant-design/icons';\r\nimport PropTypes from 'prop-types';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport setAuthToken from \"./utils/setAuthToken\"\r\nimport { store } from \"./store\"\r\nimport { setCurrentUser, logoutUser, clearErrors } from './components/Auth/action';\r\n\r\n\r\nif (localStorage.jwtToken) {\r\n  // Set auth token header auth\r\n  const token = localStorage.jwtToken;\r\n  setAuthToken(token);\r\n  // Decode token and get user info and exp\r\n  const decoded = jwt_decode(token);\r\n  // Set user and isAuthenticated\r\n  store.dispatch(setCurrentUser(decoded));\r\n  // Check for expired token\r\n  const currentTime = Date.now() / 1000; // to get in milliseconds\r\n  if (decoded.exp < currentTime) {\r\n    store.dispatch(logoutUser());\r\n    window.location.href = \"/admin/login\";\r\n    // Redirect to login\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  static propTypes = {\r\n    location: PropTypes.object.isRequired\r\n  }\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      content: '',\r\n    }\r\n  }\r\n  handleEditorChange = (content, editor) => {\r\n    this.setState({ content })\r\n    // window.localStorage.setItem({ content: e.target.getContent() })\r\n  }\r\n\r\n  render() {\r\n    const { location } = this.props;\r\n    return (\r\n      <div className=\"app\" style={location.pathname == \"/admin\" ? {} : { paddingBottom: \"1px\" }}>\r\n        {/* <TextEditor2 />\r\n        <LivePreview />\r\n        <FormBuilder />\r\n        <BuildCircuitBuilder /> */}\r\n\r\n        {/* <iframe width=\"600px\" height=\"400px\" src=\"https://editor.p5js.org/SoumitroV/embed/Hwq52Cn0t\"></iframe>\r\n        <iframe width=\"600px\" height=\"400px\" src=\"https://circuitverse.org/simulator/embed/248\" id=\"projectPreview\" scrolling=\"no\" webkitAllowFullScreen mozAllowFullScreen allowFullScreen></iframe> */}\r\n        {/* <Modules /> */}\r\n        {/* <div><Link to=\"/admin\">HOME</Link></div> */}\r\n        <Menu theme={location.pathname == \"/admin\" ? \"dark\" : \"light\"}\r\n          style={{ background: location.pathname != \"/admin\" ? \"linear-gradient(to right, #FFFFFF, #ECE9E6)\" : \"\" }}\r\n          mode=\"horizontal\"\r\n          defaultSelectedKeys={['/admin']}\r\n          selectedKeys={[location.pathname]}\r\n          onClick={e => {\r\n            if (e.key == \"logout\") {\r\n              store.dispatch(logoutUser());\r\n            }\r\n          }}\r\n        >\r\n          <Menu.Item key=\"/admin\">\r\n            <NavLink to=\"/admin\">\r\n              <HomeFilled />\r\n              <span>Home</span>\r\n            </NavLink>\r\n          </Menu.Item>\r\n          {localStorage.jwtToken ? <Menu.Item key=\"logout\">\r\n            Logout\r\n          </Menu.Item> : null}\r\n\r\n        </Menu>\r\n        <Switch>\r\n          <Route path=\"/admin/login\" component={Login} />\r\n          <PrivateRoute path=\"/admin/:type/module/:id\" component={Module} />\r\n          <PrivateRoute path=\"/admin/:type/course/introduction/:id\" component={AddIntroduction} />\r\n          <PrivateRoute path=\"/admin/:type/course/experiment/:id\" component={AddExperiment} />\r\n          <PrivateRoute path=\"/admin/:type/course/troubleshoot/:id\" component={AddTroubleshoot} />\r\n          <PrivateRoute path=\"/admin/:type/course/build-circuit/:id\" component={AddBuildCircuit} />\r\n          <PrivateRoute path=\"/admin/:type/course/experiment-form/:id/:expId\" component={AddExperimentForm} />\r\n          <PrivateRoute path=\"/admin/:type/course/results/:id\" component={AddResults} />\r\n          <PrivateRoute path=\"/admin/:type/course/excercise/:id\" component={AddExcercise} />\r\n          <PrivateRoute exact path=\"/admin/:type\" component={Modules} />\r\n          <PrivateRoute exact path=\"/admin/:type/course/:id\" component={Course} />\r\n          <PrivateRoute path=\"/admin/:type/add-module\" component={AddModule} />\r\n          <PrivateRoute exact path=\"/admin/:type/add-starter\" component={AddModuleConf} />\r\n          <PrivateRoute path=\"/admin/:type/add-course/:module_id\" component={AddCourse} />\r\n          <PrivateRoute path=\"/admin\" component={CreatorHome} />\r\n        </Switch>\r\n\r\n\r\n\r\n        {/* <TextEditor /> */}\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker === null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from \"./store\"\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <PersistGate persistor={persistor}>\r\n        {/* <React.StrictMode> */}\r\n          <App />\r\n        {/* </React.StrictMode> */}\r\n      </PersistGate>\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const ACTION = {\r\n    GET_CURRENT_COURSE: \"GET_CURRENT_COURSE\",\r\n    GET_CURRENT_PARENT:\"GET_CURRENT_PARENT\",\r\n    //<<<<INTRODUCTION>>>>>\r\n    SET_INTRODUCTION_HTML: \"SET_INTRODUCTION_HTML\",\r\n    ADD_INTRODUCTION_SUCCESS: \"ADD_INTRODUCTION_SUCCESS\",\r\n    GET_INTRODCUTION_HTML: \"GET_INTRODUCTION_HTML\",\r\n    CLEAR_INTRODUCTION: \"CLEAR_INTRODUCTION\",\r\n    //<<<BUILD_CIRCUIT>>>>>\r\n\r\n    ADD_BUILD_CIRCUIT_SUCCESS: \"ADD_BUILD_CIRCUIT_SUCCESS\",\r\n    GET_BUILD_CIRCUIT: \"GET_BUILD_CIRCUIT\",\r\n    CLEAR_BUILD_CIRCUIT: \"CLEAR_BUILD_CIRCUIT\",\r\n\r\n    //<<<EXPERIMENT>>>>>\r\n\r\n    ADD_EXPERIMENT_SUCCESS: \"ADD_EXPERIMENT_SUCCESS\",\r\n    GET_EXPERIMENT: \"GET_EXPERIMENT\",\r\n    CLEAR_EXPERIMENT: \"CLEAR_EXPERIMENT\",\r\n\r\n    //<<<EXPERIMENT_FORM>>>>>\r\n\r\n    ADD_EXPERIMENT_FORM_SUCCESS: \"ADD_EXPERIMENT_FORM_SUCCESS\",\r\n\r\n    //<<<EXPERIMENT_FORM>>>>>\r\n\r\n    ADD_RESULTS_SUCCESS: \"ADD_RESULTS_SUCCESS\",\r\n\r\n\r\n    //<<<TROUBLESHOOT>>>>>\r\n\r\n    ADD_TROUBLESHOOT_SUCCESS: \"ADD_TROUBLESHOOT_SUCCESS\",\r\n    GET_TROUBLESHOOT: \"GET_TROUBLESHOOT\",\r\n    CLEAR_TROUBLESHOOT: \"CLEAR_TROUBLESHOOT\",\r\n\r\n    //<<<EXCERCISE>>>>>\r\n\r\n    ADD_EXCERCISE_SUCCESS: \"ADD_EXCERCISE_SUCCESS\",\r\n    GET_EXCERCISE: \"GET_EXCERCISE\",\r\n    CLEAR_EXCERCISE: \"CLEAR_EXCERCISE\"\r\n}"],"sourceRoot":""}